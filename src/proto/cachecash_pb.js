/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ccmsg.BatchSignature', null, global);
goog.exportSymbol('proto.ccmsg.BlockKey', null, global);
goog.exportSymbol('proto.ccmsg.BlockSourceHTTP', null, global);
goog.exportSymbol('proto.ccmsg.BlockSourceInline', null, global);
goog.exportSymbol('proto.ccmsg.CacheInfo', null, global);
goog.exportSymbol('proto.ccmsg.CacheMissRequest', null, global);
goog.exportSymbol('proto.ccmsg.CacheMissResponse', null, global);
goog.exportSymbol('proto.ccmsg.Certificate', null, global);
goog.exportSymbol('proto.ccmsg.Chunk', null, global);
goog.exportSymbol('proto.ccmsg.ClientCacheRequest', null, global);
goog.exportSymbol('proto.ccmsg.ClientCacheResponse', null, global);
goog.exportSymbol('proto.ccmsg.ClientCacheResponseData', null, global);
goog.exportSymbol('proto.ccmsg.ClientCacheResponseL1', null, global);
goog.exportSymbol('proto.ccmsg.ClientCacheResponseL2', null, global);
goog.exportSymbol('proto.ccmsg.ColocationPuzzleInfo', null, global);
goog.exportSymbol('proto.ccmsg.ContentRequest', null, global);
goog.exportSymbol('proto.ccmsg.ContentResponse', null, global);
goog.exportSymbol('proto.ccmsg.Error', null, global);
goog.exportSymbol('proto.ccmsg.EscrowInfo', null, global);
goog.exportSymbol('proto.ccmsg.NetworkAddress', null, global);
goog.exportSymbol('proto.ccmsg.ObjectMetadata', null, global);
goog.exportSymbol('proto.ccmsg.PublicKey', null, global);
goog.exportSymbol('proto.ccmsg.Segment', null, global);
goog.exportSymbol('proto.ccmsg.TicketBundle', null, global);
goog.exportSymbol('proto.ccmsg.TicketBundleRemainder', null, global);
goog.exportSymbol('proto.ccmsg.TicketBundleSubdigests', null, global);
goog.exportSymbol('proto.ccmsg.TicketL1', null, global);
goog.exportSymbol('proto.ccmsg.TicketL2', null, global);
goog.exportSymbol('proto.ccmsg.TicketL2Info', null, global);
goog.exportSymbol('proto.ccmsg.TicketRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ccmsg.Error = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ccmsg.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ccmsg.Error.displayName = 'proto.ccmsg.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ccmsg.PublicKey = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ccmsg.PublicKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ccmsg.PublicKey.displayName = 'proto.ccmsg.PublicKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ccmsg.EscrowInfo = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.ccmsg.EscrowInfo.repeatedFields_, null);
};
goog.inherits(proto.ccmsg.EscrowInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ccmsg.EscrowInfo.displayName = 'proto.ccmsg.EscrowInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ccmsg.Segment = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ccmsg.Segment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ccmsg.Segment.displayName = 'proto.ccmsg.Segment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ccmsg.TicketBundle = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.ccmsg.TicketBundle.repeatedFields_, null);
};
goog.inherits(proto.ccmsg.TicketBundle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ccmsg.TicketBundle.displayName = 'proto.ccmsg.TicketBundle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ccmsg.TicketBundleRemainder = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ccmsg.TicketBundleRemainder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ccmsg.TicketBundleRemainder.displayName = 'proto.ccmsg.TicketBundleRemainder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ccmsg.CacheInfo = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ccmsg.CacheInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ccmsg.CacheInfo.displayName = 'proto.ccmsg.CacheInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ccmsg.NetworkAddress = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ccmsg.NetworkAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ccmsg.NetworkAddress.displayName = 'proto.ccmsg.NetworkAddress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ccmsg.ColocationPuzzleInfo = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ccmsg.ColocationPuzzleInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ccmsg.ColocationPuzzleInfo.displayName = 'proto.ccmsg.ColocationPuzzleInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ccmsg.BatchSignature = function(opt_data) {
    jspb.Message.initialize(
        this,
        opt_data,
        0,
        -1,
        proto.ccmsg.BatchSignature.repeatedFields_,
        null
    );
};
goog.inherits(proto.ccmsg.BatchSignature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ccmsg.BatchSignature.displayName = 'proto.ccmsg.BatchSignature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ccmsg.BlockKey = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ccmsg.BlockKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ccmsg.BlockKey.displayName = 'proto.ccmsg.BlockKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ccmsg.TicketRequest = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ccmsg.TicketRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ccmsg.TicketRequest.displayName = 'proto.ccmsg.TicketRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ccmsg.TicketL1 = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ccmsg.TicketL1, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ccmsg.TicketL1.displayName = 'proto.ccmsg.TicketL1';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ccmsg.TicketL2 = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.ccmsg.TicketL2.repeatedFields_, null);
};
goog.inherits(proto.ccmsg.TicketL2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ccmsg.TicketL2.displayName = 'proto.ccmsg.TicketL2';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ccmsg.TicketL2Info = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ccmsg.TicketL2Info, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ccmsg.TicketL2Info.displayName = 'proto.ccmsg.TicketL2Info';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ccmsg.Certificate = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ccmsg.Certificate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ccmsg.Certificate.displayName = 'proto.ccmsg.Certificate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ccmsg.TicketBundleSubdigests = function(opt_data) {
    jspb.Message.initialize(
        this,
        opt_data,
        0,
        -1,
        proto.ccmsg.TicketBundleSubdigests.repeatedFields_,
        null
    );
};
goog.inherits(proto.ccmsg.TicketBundleSubdigests, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ccmsg.TicketBundleSubdigests.displayName = 'proto.ccmsg.TicketBundleSubdigests';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ccmsg.ContentRequest = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ccmsg.ContentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ccmsg.ContentRequest.displayName = 'proto.ccmsg.ContentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ccmsg.ContentResponse = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ccmsg.ContentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ccmsg.ContentResponse.displayName = 'proto.ccmsg.ContentResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ccmsg.ClientCacheRequest = function(opt_data) {
    jspb.Message.initialize(
        this,
        opt_data,
        0,
        -1,
        null,
        proto.ccmsg.ClientCacheRequest.oneofGroups_
    );
};
goog.inherits(proto.ccmsg.ClientCacheRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ccmsg.ClientCacheRequest.displayName = 'proto.ccmsg.ClientCacheRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ccmsg.ClientCacheResponse = function(opt_data) {
    jspb.Message.initialize(
        this,
        opt_data,
        0,
        -1,
        null,
        proto.ccmsg.ClientCacheResponse.oneofGroups_
    );
};
goog.inherits(proto.ccmsg.ClientCacheResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ccmsg.ClientCacheResponse.displayName = 'proto.ccmsg.ClientCacheResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ccmsg.ClientCacheResponseData = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ccmsg.ClientCacheResponseData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ccmsg.ClientCacheResponseData.displayName = 'proto.ccmsg.ClientCacheResponseData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ccmsg.ClientCacheResponseL1 = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ccmsg.ClientCacheResponseL1, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ccmsg.ClientCacheResponseL1.displayName = 'proto.ccmsg.ClientCacheResponseL1';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ccmsg.ClientCacheResponseL2 = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ccmsg.ClientCacheResponseL2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ccmsg.ClientCacheResponseL2.displayName = 'proto.ccmsg.ClientCacheResponseL2';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ccmsg.CacheMissRequest = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ccmsg.CacheMissRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ccmsg.CacheMissRequest.displayName = 'proto.ccmsg.CacheMissRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ccmsg.CacheMissResponse = function(opt_data) {
    jspb.Message.initialize(
        this,
        opt_data,
        0,
        -1,
        proto.ccmsg.CacheMissResponse.repeatedFields_,
        null
    );
};
goog.inherits(proto.ccmsg.CacheMissResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ccmsg.CacheMissResponse.displayName = 'proto.ccmsg.CacheMissResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ccmsg.Chunk = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ccmsg.Chunk.oneofGroups_);
};
goog.inherits(proto.ccmsg.Chunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ccmsg.Chunk.displayName = 'proto.ccmsg.Chunk';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ccmsg.BlockSourceHTTP = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ccmsg.BlockSourceHTTP, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ccmsg.BlockSourceHTTP.displayName = 'proto.ccmsg.BlockSourceHTTP';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ccmsg.BlockSourceInline = function(opt_data) {
    jspb.Message.initialize(
        this,
        opt_data,
        0,
        -1,
        proto.ccmsg.BlockSourceInline.repeatedFields_,
        null
    );
};
goog.inherits(proto.ccmsg.BlockSourceInline, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ccmsg.BlockSourceInline.displayName = 'proto.ccmsg.BlockSourceInline';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ccmsg.ObjectMetadata = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ccmsg.ObjectMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ccmsg.ObjectMetadata.displayName = 'proto.ccmsg.ObjectMetadata';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ccmsg.Error.prototype.toObject = function(opt_includeInstance) {
        return proto.ccmsg.Error.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ccmsg.Error} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ccmsg.Error.toObject = function(includeInstance, msg) {
        var obj = {
            code: jspb.Message.getFieldWithDefault(msg, 1, 0),
            message: jspb.Message.getFieldWithDefault(msg, 2, '')
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ccmsg.Error}
 */
proto.ccmsg.Error.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ccmsg.Error();
    return proto.ccmsg.Error.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ccmsg.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ccmsg.Error}
 */
proto.ccmsg.Error.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setCode(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setMessage(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ccmsg.Error.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.ccmsg.Error.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ccmsg.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ccmsg.Error.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getCode();
    if (f !== 0) {
        writer.writeUint64(1, f);
    }
    f = message.getMessage();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};

/**
 * optional uint64 code = 1;
 * @return {number}
 */
proto.ccmsg.Error.prototype.getCode = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {number} value */
proto.ccmsg.Error.prototype.setCode = function(value) {
    jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional string message = 2;
 * @return {string}
 */
proto.ccmsg.Error.prototype.getMessage = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.ccmsg.Error.prototype.setMessage = function(value) {
    jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ccmsg.PublicKey.prototype.toObject = function(opt_includeInstance) {
        return proto.ccmsg.PublicKey.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ccmsg.PublicKey} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ccmsg.PublicKey.toObject = function(includeInstance, msg) {
        var obj = {
            publicKey: msg.getPublicKey_asB64()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ccmsg.PublicKey}
 */
proto.ccmsg.PublicKey.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ccmsg.PublicKey();
    return proto.ccmsg.PublicKey.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ccmsg.PublicKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ccmsg.PublicKey}
 */
proto.ccmsg.PublicKey.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setPublicKey(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ccmsg.PublicKey.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.ccmsg.PublicKey.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ccmsg.PublicKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ccmsg.PublicKey.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getPublicKey_asU8();
    if (f.length > 0) {
        writer.writeBytes(1, f);
    }
};

/**
 * optional bytes public_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ccmsg.PublicKey.prototype.getPublicKey = function() {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * optional bytes public_key = 1;
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {string}
 */
proto.ccmsg.PublicKey.prototype.getPublicKey_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPublicKey()));
};

/**
 * optional bytes public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {!Uint8Array}
 */
proto.ccmsg.PublicKey.prototype.getPublicKey_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPublicKey()));
};

/** @param {!(string|Uint8Array)} value */
proto.ccmsg.PublicKey.prototype.setPublicKey = function(value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ccmsg.EscrowInfo.repeatedFields_ = [6];

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ccmsg.EscrowInfo.prototype.toObject = function(opt_includeInstance) {
        return proto.ccmsg.EscrowInfo.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ccmsg.EscrowInfo} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ccmsg.EscrowInfo.toObject = function(includeInstance, msg) {
        var obj = {
            publicKey:
                (f = msg.getPublicKey()) && proto.ccmsg.PublicKey.toObject(includeInstance, f),
            publisherPublicKey:
                (f = msg.getPublisherPublicKey()) &&
                proto.ccmsg.PublicKey.toObject(includeInstance, f),
            drawDelay: jspb.Message.getFieldWithDefault(msg, 3, 0),
            expirationDelay: jspb.Message.getFieldWithDefault(msg, 4, 0),
            startBlock: jspb.Message.getFieldWithDefault(msg, 5, 0),
            ticketsPerBlockList: jspb.Message.toObjectList(
                msg.getTicketsPerBlockList(),
                proto.ccmsg.Segment.toObject,
                includeInstance
            ),
            id: msg.getId_asB64()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ccmsg.EscrowInfo}
 */
proto.ccmsg.EscrowInfo.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ccmsg.EscrowInfo();
    return proto.ccmsg.EscrowInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ccmsg.EscrowInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ccmsg.EscrowInfo}
 */
proto.ccmsg.EscrowInfo.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.ccmsg.PublicKey();
                reader.readMessage(value, proto.ccmsg.PublicKey.deserializeBinaryFromReader);
                msg.setPublicKey(value);
                break;
            case 2:
                var value = new proto.ccmsg.PublicKey();
                reader.readMessage(value, proto.ccmsg.PublicKey.deserializeBinaryFromReader);
                msg.setPublisherPublicKey(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setDrawDelay(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setExpirationDelay(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setStartBlock(value);
                break;
            case 6:
                var value = new proto.ccmsg.Segment();
                reader.readMessage(value, proto.ccmsg.Segment.deserializeBinaryFromReader);
                msg.addTicketsPerBlock(value);
                break;
            case 7:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ccmsg.EscrowInfo.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.ccmsg.EscrowInfo.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ccmsg.EscrowInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ccmsg.EscrowInfo.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getPublicKey();
    if (f != null) {
        writer.writeMessage(1, f, proto.ccmsg.PublicKey.serializeBinaryToWriter);
    }
    f = message.getPublisherPublicKey();
    if (f != null) {
        writer.writeMessage(2, f, proto.ccmsg.PublicKey.serializeBinaryToWriter);
    }
    f = message.getDrawDelay();
    if (f !== 0) {
        writer.writeUint64(3, f);
    }
    f = message.getExpirationDelay();
    if (f !== 0) {
        writer.writeUint64(4, f);
    }
    f = message.getStartBlock();
    if (f !== 0) {
        writer.writeUint64(5, f);
    }
    f = message.getTicketsPerBlockList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(6, f, proto.ccmsg.Segment.serializeBinaryToWriter);
    }
    f = message.getId_asU8();
    if (f.length > 0) {
        writer.writeBytes(7, f);
    }
};

/**
 * optional PublicKey public_key = 1;
 * @return {?proto.ccmsg.PublicKey}
 */
proto.ccmsg.EscrowInfo.prototype.getPublicKey = function() {
    return /** @type{?proto.ccmsg.PublicKey} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.PublicKey,
        1
    ));
};

/** @param {?proto.ccmsg.PublicKey|undefined} value */
proto.ccmsg.EscrowInfo.prototype.setPublicKey = function(value) {
    jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.EscrowInfo.prototype.clearPublicKey = function() {
    this.setPublicKey(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.EscrowInfo.prototype.hasPublicKey = function() {
    return jspb.Message.getField(this, 1) != null;
};

/**
 * optional PublicKey publisher_public_key = 2;
 * @return {?proto.ccmsg.PublicKey}
 */
proto.ccmsg.EscrowInfo.prototype.getPublisherPublicKey = function() {
    return /** @type{?proto.ccmsg.PublicKey} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.PublicKey,
        2
    ));
};

/** @param {?proto.ccmsg.PublicKey|undefined} value */
proto.ccmsg.EscrowInfo.prototype.setPublisherPublicKey = function(value) {
    jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.EscrowInfo.prototype.clearPublisherPublicKey = function() {
    this.setPublisherPublicKey(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.EscrowInfo.prototype.hasPublisherPublicKey = function() {
    return jspb.Message.getField(this, 2) != null;
};

/**
 * optional uint64 draw_delay = 3;
 * @return {number}
 */
proto.ccmsg.EscrowInfo.prototype.getDrawDelay = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/** @param {number} value */
proto.ccmsg.EscrowInfo.prototype.setDrawDelay = function(value) {
    jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional uint64 expiration_delay = 4;
 * @return {number}
 */
proto.ccmsg.EscrowInfo.prototype.getExpirationDelay = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/** @param {number} value */
proto.ccmsg.EscrowInfo.prototype.setExpirationDelay = function(value) {
    jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional uint64 start_block = 5;
 * @return {number}
 */
proto.ccmsg.EscrowInfo.prototype.getStartBlock = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/** @param {number} value */
proto.ccmsg.EscrowInfo.prototype.setStartBlock = function(value) {
    jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * repeated Segment tickets_per_block = 6;
 * @return {!Array<!proto.ccmsg.Segment>}
 */
proto.ccmsg.EscrowInfo.prototype.getTicketsPerBlockList = function() {
    return /** @type{!Array<!proto.ccmsg.Segment>} */ (jspb.Message.getRepeatedWrapperField(
        this,
        proto.ccmsg.Segment,
        6
    ));
};

/** @param {!Array<!proto.ccmsg.Segment>} value */
proto.ccmsg.EscrowInfo.prototype.setTicketsPerBlockList = function(value) {
    jspb.Message.setRepeatedWrapperField(this, 6, value);
};

/**
 * @param {!proto.ccmsg.Segment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ccmsg.Segment}
 */
proto.ccmsg.EscrowInfo.prototype.addTicketsPerBlock = function(opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(
        this,
        6,
        opt_value,
        proto.ccmsg.Segment,
        opt_index
    );
};

/**
 * Clears the list making it empty but non-null.
 */
proto.ccmsg.EscrowInfo.prototype.clearTicketsPerBlockList = function() {
    this.setTicketsPerBlockList([]);
};

/**
 * optional bytes id = 7;
 * @return {!(string|Uint8Array)}
 */
proto.ccmsg.EscrowInfo.prototype.getId = function() {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ''));
};

/**
 * optional bytes id = 7;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.ccmsg.EscrowInfo.prototype.getId_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getId()));
};

/**
 * optional bytes id = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.ccmsg.EscrowInfo.prototype.getId_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getId()));
};

/** @param {!(string|Uint8Array)} value */
proto.ccmsg.EscrowInfo.prototype.setId = function(value) {
    jspb.Message.setProto3BytesField(this, 7, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ccmsg.Segment.prototype.toObject = function(opt_includeInstance) {
        return proto.ccmsg.Segment.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ccmsg.Segment} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ccmsg.Segment.toObject = function(includeInstance, msg) {
        var obj = {
            length: jspb.Message.getFieldWithDefault(msg, 1, 0),
            value: jspb.Message.getFieldWithDefault(msg, 2, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ccmsg.Segment}
 */
proto.ccmsg.Segment.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ccmsg.Segment();
    return proto.ccmsg.Segment.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ccmsg.Segment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ccmsg.Segment}
 */
proto.ccmsg.Segment.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setLength(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ccmsg.Segment.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.ccmsg.Segment.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ccmsg.Segment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ccmsg.Segment.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getLength();
    if (f !== 0) {
        writer.writeUint64(1, f);
    }
    f = message.getValue();
    if (f !== 0) {
        writer.writeUint64(2, f);
    }
};

/**
 * optional uint64 length = 1;
 * @return {number}
 */
proto.ccmsg.Segment.prototype.getLength = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {number} value */
proto.ccmsg.Segment.prototype.setLength = function(value) {
    jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional uint64 value = 2;
 * @return {number}
 */
proto.ccmsg.Segment.prototype.getValue = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/** @param {number} value */
proto.ccmsg.Segment.prototype.setValue = function(value) {
    jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ccmsg.TicketBundle.repeatedFields_ = [5, 6, 9];

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ccmsg.TicketBundle.prototype.toObject = function(opt_includeInstance) {
        return proto.ccmsg.TicketBundle.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ccmsg.TicketBundle} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ccmsg.TicketBundle.toObject = function(includeInstance, msg) {
        var obj = {
            remainder:
                (f = msg.getRemainder()) &&
                proto.ccmsg.TicketBundleRemainder.toObject(includeInstance, f),
            ticketRequestList: jspb.Message.toObjectList(
                msg.getTicketRequestList(),
                proto.ccmsg.TicketRequest.toObject,
                includeInstance
            ),
            ticketL1List: jspb.Message.toObjectList(
                msg.getTicketL1List(),
                proto.ccmsg.TicketL1.toObject,
                includeInstance
            ),
            encryptedTicketL2: msg.getEncryptedTicketL2_asB64(),
            batchSig:
                (f = msg.getBatchSig()) && proto.ccmsg.BatchSignature.toObject(includeInstance, f),
            bundleSignerCert:
                (f = msg.getBundleSignerCert()) &&
                proto.ccmsg.Certificate.toObject(includeInstance, f),
            cacheInfoList: jspb.Message.toObjectList(
                msg.getCacheInfoList(),
                proto.ccmsg.CacheInfo.toObject,
                includeInstance
            ),
            metadata:
                (f = msg.getMetadata()) && proto.ccmsg.ObjectMetadata.toObject(includeInstance, f)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ccmsg.TicketBundle}
 */
proto.ccmsg.TicketBundle.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ccmsg.TicketBundle();
    return proto.ccmsg.TicketBundle.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ccmsg.TicketBundle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ccmsg.TicketBundle}
 */
proto.ccmsg.TicketBundle.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.ccmsg.TicketBundleRemainder();
                reader.readMessage(
                    value,
                    proto.ccmsg.TicketBundleRemainder.deserializeBinaryFromReader
                );
                msg.setRemainder(value);
                break;
            case 5:
                var value = new proto.ccmsg.TicketRequest();
                reader.readMessage(value, proto.ccmsg.TicketRequest.deserializeBinaryFromReader);
                msg.addTicketRequest(value);
                break;
            case 6:
                var value = new proto.ccmsg.TicketL1();
                reader.readMessage(value, proto.ccmsg.TicketL1.deserializeBinaryFromReader);
                msg.addTicketL1(value);
                break;
            case 10:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setEncryptedTicketL2(value);
                break;
            case 8:
                var value = new proto.ccmsg.BatchSignature();
                reader.readMessage(value, proto.ccmsg.BatchSignature.deserializeBinaryFromReader);
                msg.setBatchSig(value);
                break;
            case 11:
                var value = new proto.ccmsg.Certificate();
                reader.readMessage(value, proto.ccmsg.Certificate.deserializeBinaryFromReader);
                msg.setBundleSignerCert(value);
                break;
            case 9:
                var value = new proto.ccmsg.CacheInfo();
                reader.readMessage(value, proto.ccmsg.CacheInfo.deserializeBinaryFromReader);
                msg.addCacheInfo(value);
                break;
            case 12:
                var value = new proto.ccmsg.ObjectMetadata();
                reader.readMessage(value, proto.ccmsg.ObjectMetadata.deserializeBinaryFromReader);
                msg.setMetadata(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ccmsg.TicketBundle.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.ccmsg.TicketBundle.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ccmsg.TicketBundle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ccmsg.TicketBundle.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getRemainder();
    if (f != null) {
        writer.writeMessage(1, f, proto.ccmsg.TicketBundleRemainder.serializeBinaryToWriter);
    }
    f = message.getTicketRequestList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(5, f, proto.ccmsg.TicketRequest.serializeBinaryToWriter);
    }
    f = message.getTicketL1List();
    if (f.length > 0) {
        writer.writeRepeatedMessage(6, f, proto.ccmsg.TicketL1.serializeBinaryToWriter);
    }
    f = message.getEncryptedTicketL2_asU8();
    if (f.length > 0) {
        writer.writeBytes(10, f);
    }
    f = message.getBatchSig();
    if (f != null) {
        writer.writeMessage(8, f, proto.ccmsg.BatchSignature.serializeBinaryToWriter);
    }
    f = message.getBundleSignerCert();
    if (f != null) {
        writer.writeMessage(11, f, proto.ccmsg.Certificate.serializeBinaryToWriter);
    }
    f = message.getCacheInfoList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(9, f, proto.ccmsg.CacheInfo.serializeBinaryToWriter);
    }
    f = message.getMetadata();
    if (f != null) {
        writer.writeMessage(12, f, proto.ccmsg.ObjectMetadata.serializeBinaryToWriter);
    }
};

/**
 * optional TicketBundleRemainder remainder = 1;
 * @return {?proto.ccmsg.TicketBundleRemainder}
 */
proto.ccmsg.TicketBundle.prototype.getRemainder = function() {
    return /** @type{?proto.ccmsg.TicketBundleRemainder} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.TicketBundleRemainder,
        1
    ));
};

/** @param {?proto.ccmsg.TicketBundleRemainder|undefined} value */
proto.ccmsg.TicketBundle.prototype.setRemainder = function(value) {
    jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.TicketBundle.prototype.clearRemainder = function() {
    this.setRemainder(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.TicketBundle.prototype.hasRemainder = function() {
    return jspb.Message.getField(this, 1) != null;
};

/**
 * repeated TicketRequest ticket_request = 5;
 * @return {!Array<!proto.ccmsg.TicketRequest>}
 */
proto.ccmsg.TicketBundle.prototype.getTicketRequestList = function() {
    return /** @type{!Array<!proto.ccmsg.TicketRequest>} */ (jspb.Message.getRepeatedWrapperField(
        this,
        proto.ccmsg.TicketRequest,
        5
    ));
};

/** @param {!Array<!proto.ccmsg.TicketRequest>} value */
proto.ccmsg.TicketBundle.prototype.setTicketRequestList = function(value) {
    jspb.Message.setRepeatedWrapperField(this, 5, value);
};

/**
 * @param {!proto.ccmsg.TicketRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ccmsg.TicketRequest}
 */
proto.ccmsg.TicketBundle.prototype.addTicketRequest = function(opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(
        this,
        5,
        opt_value,
        proto.ccmsg.TicketRequest,
        opt_index
    );
};

/**
 * Clears the list making it empty but non-null.
 */
proto.ccmsg.TicketBundle.prototype.clearTicketRequestList = function() {
    this.setTicketRequestList([]);
};

/**
 * repeated TicketL1 ticket_l1 = 6;
 * @return {!Array<!proto.ccmsg.TicketL1>}
 */
proto.ccmsg.TicketBundle.prototype.getTicketL1List = function() {
    return /** @type{!Array<!proto.ccmsg.TicketL1>} */ (jspb.Message.getRepeatedWrapperField(
        this,
        proto.ccmsg.TicketL1,
        6
    ));
};

/** @param {!Array<!proto.ccmsg.TicketL1>} value */
proto.ccmsg.TicketBundle.prototype.setTicketL1List = function(value) {
    jspb.Message.setRepeatedWrapperField(this, 6, value);
};

/**
 * @param {!proto.ccmsg.TicketL1=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ccmsg.TicketL1}
 */
proto.ccmsg.TicketBundle.prototype.addTicketL1 = function(opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(
        this,
        6,
        opt_value,
        proto.ccmsg.TicketL1,
        opt_index
    );
};

/**
 * Clears the list making it empty but non-null.
 */
proto.ccmsg.TicketBundle.prototype.clearTicketL1List = function() {
    this.setTicketL1List([]);
};

/**
 * optional bytes encrypted_ticket_l2 = 10;
 * @return {!(string|Uint8Array)}
 */
proto.ccmsg.TicketBundle.prototype.getEncryptedTicketL2 = function() {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ''));
};

/**
 * optional bytes encrypted_ticket_l2 = 10;
 * This is a type-conversion wrapper around `getEncryptedTicketL2()`
 * @return {string}
 */
proto.ccmsg.TicketBundle.prototype.getEncryptedTicketL2_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getEncryptedTicketL2()));
};

/**
 * optional bytes encrypted_ticket_l2 = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncryptedTicketL2()`
 * @return {!Uint8Array}
 */
proto.ccmsg.TicketBundle.prototype.getEncryptedTicketL2_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getEncryptedTicketL2()));
};

/** @param {!(string|Uint8Array)} value */
proto.ccmsg.TicketBundle.prototype.setEncryptedTicketL2 = function(value) {
    jspb.Message.setProto3BytesField(this, 10, value);
};

/**
 * optional BatchSignature batch_sig = 8;
 * @return {?proto.ccmsg.BatchSignature}
 */
proto.ccmsg.TicketBundle.prototype.getBatchSig = function() {
    return /** @type{?proto.ccmsg.BatchSignature} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.BatchSignature,
        8
    ));
};

/** @param {?proto.ccmsg.BatchSignature|undefined} value */
proto.ccmsg.TicketBundle.prototype.setBatchSig = function(value) {
    jspb.Message.setWrapperField(this, 8, value);
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.TicketBundle.prototype.clearBatchSig = function() {
    this.setBatchSig(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.TicketBundle.prototype.hasBatchSig = function() {
    return jspb.Message.getField(this, 8) != null;
};

/**
 * optional Certificate bundle_signer_cert = 11;
 * @return {?proto.ccmsg.Certificate}
 */
proto.ccmsg.TicketBundle.prototype.getBundleSignerCert = function() {
    return /** @type{?proto.ccmsg.Certificate} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.Certificate,
        11
    ));
};

/** @param {?proto.ccmsg.Certificate|undefined} value */
proto.ccmsg.TicketBundle.prototype.setBundleSignerCert = function(value) {
    jspb.Message.setWrapperField(this, 11, value);
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.TicketBundle.prototype.clearBundleSignerCert = function() {
    this.setBundleSignerCert(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.TicketBundle.prototype.hasBundleSignerCert = function() {
    return jspb.Message.getField(this, 11) != null;
};

/**
 * repeated CacheInfo cache_info = 9;
 * @return {!Array<!proto.ccmsg.CacheInfo>}
 */
proto.ccmsg.TicketBundle.prototype.getCacheInfoList = function() {
    return /** @type{!Array<!proto.ccmsg.CacheInfo>} */ (jspb.Message.getRepeatedWrapperField(
        this,
        proto.ccmsg.CacheInfo,
        9
    ));
};

/** @param {!Array<!proto.ccmsg.CacheInfo>} value */
proto.ccmsg.TicketBundle.prototype.setCacheInfoList = function(value) {
    jspb.Message.setRepeatedWrapperField(this, 9, value);
};

/**
 * @param {!proto.ccmsg.CacheInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ccmsg.CacheInfo}
 */
proto.ccmsg.TicketBundle.prototype.addCacheInfo = function(opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(
        this,
        9,
        opt_value,
        proto.ccmsg.CacheInfo,
        opt_index
    );
};

/**
 * Clears the list making it empty but non-null.
 */
proto.ccmsg.TicketBundle.prototype.clearCacheInfoList = function() {
    this.setCacheInfoList([]);
};

/**
 * optional ObjectMetadata metadata = 12;
 * @return {?proto.ccmsg.ObjectMetadata}
 */
proto.ccmsg.TicketBundle.prototype.getMetadata = function() {
    return /** @type{?proto.ccmsg.ObjectMetadata} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.ObjectMetadata,
        12
    ));
};

/** @param {?proto.ccmsg.ObjectMetadata|undefined} value */
proto.ccmsg.TicketBundle.prototype.setMetadata = function(value) {
    jspb.Message.setWrapperField(this, 12, value);
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.TicketBundle.prototype.clearMetadata = function() {
    this.setMetadata(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.TicketBundle.prototype.hasMetadata = function() {
    return jspb.Message.getField(this, 12) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ccmsg.TicketBundleRemainder.prototype.toObject = function(opt_includeInstance) {
        return proto.ccmsg.TicketBundleRemainder.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ccmsg.TicketBundleRemainder} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ccmsg.TicketBundleRemainder.toObject = function(includeInstance, msg) {
        var obj = {
            requestSequenceNo: jspb.Message.getFieldWithDefault(msg, 2, 0),
            escrowId: msg.getEscrowId_asB64(),
            objectId: msg.getObjectId_asB64(),
            puzzleInfo:
                (f = msg.getPuzzleInfo()) &&
                proto.ccmsg.ColocationPuzzleInfo.toObject(includeInstance, f),
            clientPublicKey:
                (f = msg.getClientPublicKey()) && proto.ccmsg.PublicKey.toObject(includeInstance, f)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ccmsg.TicketBundleRemainder}
 */
proto.ccmsg.TicketBundleRemainder.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ccmsg.TicketBundleRemainder();
    return proto.ccmsg.TicketBundleRemainder.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ccmsg.TicketBundleRemainder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ccmsg.TicketBundleRemainder}
 */
proto.ccmsg.TicketBundleRemainder.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 2:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setRequestSequenceNo(value);
                break;
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setEscrowId(value);
                break;
            case 3:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setObjectId(value);
                break;
            case 7:
                var value = new proto.ccmsg.ColocationPuzzleInfo();
                reader.readMessage(
                    value,
                    proto.ccmsg.ColocationPuzzleInfo.deserializeBinaryFromReader
                );
                msg.setPuzzleInfo(value);
                break;
            case 8:
                var value = new proto.ccmsg.PublicKey();
                reader.readMessage(value, proto.ccmsg.PublicKey.deserializeBinaryFromReader);
                msg.setClientPublicKey(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ccmsg.TicketBundleRemainder.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.ccmsg.TicketBundleRemainder.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ccmsg.TicketBundleRemainder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ccmsg.TicketBundleRemainder.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getRequestSequenceNo();
    if (f !== 0) {
        writer.writeUint64(2, f);
    }
    f = message.getEscrowId_asU8();
    if (f.length > 0) {
        writer.writeBytes(1, f);
    }
    f = message.getObjectId_asU8();
    if (f.length > 0) {
        writer.writeBytes(3, f);
    }
    f = message.getPuzzleInfo();
    if (f != null) {
        writer.writeMessage(7, f, proto.ccmsg.ColocationPuzzleInfo.serializeBinaryToWriter);
    }
    f = message.getClientPublicKey();
    if (f != null) {
        writer.writeMessage(8, f, proto.ccmsg.PublicKey.serializeBinaryToWriter);
    }
};

/**
 * optional uint64 request_sequence_no = 2;
 * @return {number}
 */
proto.ccmsg.TicketBundleRemainder.prototype.getRequestSequenceNo = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/** @param {number} value */
proto.ccmsg.TicketBundleRemainder.prototype.setRequestSequenceNo = function(value) {
    jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional bytes escrow_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ccmsg.TicketBundleRemainder.prototype.getEscrowId = function() {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * optional bytes escrow_id = 1;
 * This is a type-conversion wrapper around `getEscrowId()`
 * @return {string}
 */
proto.ccmsg.TicketBundleRemainder.prototype.getEscrowId_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getEscrowId()));
};

/**
 * optional bytes escrow_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEscrowId()`
 * @return {!Uint8Array}
 */
proto.ccmsg.TicketBundleRemainder.prototype.getEscrowId_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getEscrowId()));
};

/** @param {!(string|Uint8Array)} value */
proto.ccmsg.TicketBundleRemainder.prototype.setEscrowId = function(value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional bytes object_id = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ccmsg.TicketBundleRemainder.prototype.getObjectId = function() {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * optional bytes object_id = 3;
 * This is a type-conversion wrapper around `getObjectId()`
 * @return {string}
 */
proto.ccmsg.TicketBundleRemainder.prototype.getObjectId_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getObjectId()));
};

/**
 * optional bytes object_id = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getObjectId()`
 * @return {!Uint8Array}
 */
proto.ccmsg.TicketBundleRemainder.prototype.getObjectId_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getObjectId()));
};

/** @param {!(string|Uint8Array)} value */
proto.ccmsg.TicketBundleRemainder.prototype.setObjectId = function(value) {
    jspb.Message.setProto3BytesField(this, 3, value);
};

/**
 * optional ColocationPuzzleInfo puzzle_info = 7;
 * @return {?proto.ccmsg.ColocationPuzzleInfo}
 */
proto.ccmsg.TicketBundleRemainder.prototype.getPuzzleInfo = function() {
    return /** @type{?proto.ccmsg.ColocationPuzzleInfo} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.ColocationPuzzleInfo,
        7
    ));
};

/** @param {?proto.ccmsg.ColocationPuzzleInfo|undefined} value */
proto.ccmsg.TicketBundleRemainder.prototype.setPuzzleInfo = function(value) {
    jspb.Message.setWrapperField(this, 7, value);
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.TicketBundleRemainder.prototype.clearPuzzleInfo = function() {
    this.setPuzzleInfo(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.TicketBundleRemainder.prototype.hasPuzzleInfo = function() {
    return jspb.Message.getField(this, 7) != null;
};

/**
 * optional PublicKey client_public_key = 8;
 * @return {?proto.ccmsg.PublicKey}
 */
proto.ccmsg.TicketBundleRemainder.prototype.getClientPublicKey = function() {
    return /** @type{?proto.ccmsg.PublicKey} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.PublicKey,
        8
    ));
};

/** @param {?proto.ccmsg.PublicKey|undefined} value */
proto.ccmsg.TicketBundleRemainder.prototype.setClientPublicKey = function(value) {
    jspb.Message.setWrapperField(this, 8, value);
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.TicketBundleRemainder.prototype.clearClientPublicKey = function() {
    this.setClientPublicKey(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.TicketBundleRemainder.prototype.hasClientPublicKey = function() {
    return jspb.Message.getField(this, 8) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ccmsg.CacheInfo.prototype.toObject = function(opt_includeInstance) {
        return proto.ccmsg.CacheInfo.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ccmsg.CacheInfo} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ccmsg.CacheInfo.toObject = function(includeInstance, msg) {
        var obj = {
            addr: (f = msg.getAddr()) && proto.ccmsg.NetworkAddress.toObject(includeInstance, f)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ccmsg.CacheInfo}
 */
proto.ccmsg.CacheInfo.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ccmsg.CacheInfo();
    return proto.ccmsg.CacheInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ccmsg.CacheInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ccmsg.CacheInfo}
 */
proto.ccmsg.CacheInfo.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.ccmsg.NetworkAddress();
                reader.readMessage(value, proto.ccmsg.NetworkAddress.deserializeBinaryFromReader);
                msg.setAddr(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ccmsg.CacheInfo.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.ccmsg.CacheInfo.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ccmsg.CacheInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ccmsg.CacheInfo.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getAddr();
    if (f != null) {
        writer.writeMessage(1, f, proto.ccmsg.NetworkAddress.serializeBinaryToWriter);
    }
};

/**
 * optional NetworkAddress addr = 1;
 * @return {?proto.ccmsg.NetworkAddress}
 */
proto.ccmsg.CacheInfo.prototype.getAddr = function() {
    return /** @type{?proto.ccmsg.NetworkAddress} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.NetworkAddress,
        1
    ));
};

/** @param {?proto.ccmsg.NetworkAddress|undefined} value */
proto.ccmsg.CacheInfo.prototype.setAddr = function(value) {
    jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.CacheInfo.prototype.clearAddr = function() {
    this.setAddr(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.CacheInfo.prototype.hasAddr = function() {
    return jspb.Message.getField(this, 1) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ccmsg.NetworkAddress.prototype.toObject = function(opt_includeInstance) {
        return proto.ccmsg.NetworkAddress.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ccmsg.NetworkAddress} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ccmsg.NetworkAddress.toObject = function(includeInstance, msg) {
        var obj = {
            inetaddr: msg.getInetaddr_asB64(),
            inet6addr: msg.getInet6addr_asB64(),
            port: jspb.Message.getFieldWithDefault(msg, 3, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ccmsg.NetworkAddress}
 */
proto.ccmsg.NetworkAddress.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ccmsg.NetworkAddress();
    return proto.ccmsg.NetworkAddress.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ccmsg.NetworkAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ccmsg.NetworkAddress}
 */
proto.ccmsg.NetworkAddress.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setInetaddr(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setInet6addr(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readUint32());
                msg.setPort(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ccmsg.NetworkAddress.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.ccmsg.NetworkAddress.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ccmsg.NetworkAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ccmsg.NetworkAddress.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getInetaddr_asU8();
    if (f.length > 0) {
        writer.writeBytes(1, f);
    }
    f = message.getInet6addr_asU8();
    if (f.length > 0) {
        writer.writeBytes(2, f);
    }
    f = message.getPort();
    if (f !== 0) {
        writer.writeUint32(3, f);
    }
};

/**
 * optional bytes inetaddr = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ccmsg.NetworkAddress.prototype.getInetaddr = function() {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * optional bytes inetaddr = 1;
 * This is a type-conversion wrapper around `getInetaddr()`
 * @return {string}
 */
proto.ccmsg.NetworkAddress.prototype.getInetaddr_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getInetaddr()));
};

/**
 * optional bytes inetaddr = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInetaddr()`
 * @return {!Uint8Array}
 */
proto.ccmsg.NetworkAddress.prototype.getInetaddr_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getInetaddr()));
};

/** @param {!(string|Uint8Array)} value */
proto.ccmsg.NetworkAddress.prototype.setInetaddr = function(value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional bytes inet6addr = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ccmsg.NetworkAddress.prototype.getInet6addr = function() {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * optional bytes inet6addr = 2;
 * This is a type-conversion wrapper around `getInet6addr()`
 * @return {string}
 */
proto.ccmsg.NetworkAddress.prototype.getInet6addr_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getInet6addr()));
};

/**
 * optional bytes inet6addr = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInet6addr()`
 * @return {!Uint8Array}
 */
proto.ccmsg.NetworkAddress.prototype.getInet6addr_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getInet6addr()));
};

/** @param {!(string|Uint8Array)} value */
proto.ccmsg.NetworkAddress.prototype.setInet6addr = function(value) {
    jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional uint32 port = 3;
 * @return {number}
 */
proto.ccmsg.NetworkAddress.prototype.getPort = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/** @param {number} value */
proto.ccmsg.NetworkAddress.prototype.setPort = function(value) {
    jspb.Message.setProto3IntField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ccmsg.ColocationPuzzleInfo.prototype.toObject = function(opt_includeInstance) {
        return proto.ccmsg.ColocationPuzzleInfo.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ccmsg.ColocationPuzzleInfo} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ccmsg.ColocationPuzzleInfo.toObject = function(includeInstance, msg) {
        var obj = {
            goal: msg.getGoal_asB64(),
            rounds: jspb.Message.getFieldWithDefault(msg, 1, 0),
            startOffset: jspb.Message.getFieldWithDefault(msg, 3, 0),
            startRange: jspb.Message.getFieldWithDefault(msg, 4, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ccmsg.ColocationPuzzleInfo}
 */
proto.ccmsg.ColocationPuzzleInfo.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ccmsg.ColocationPuzzleInfo();
    return proto.ccmsg.ColocationPuzzleInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ccmsg.ColocationPuzzleInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ccmsg.ColocationPuzzleInfo}
 */
proto.ccmsg.ColocationPuzzleInfo.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setGoal(value);
                break;
            case 1:
                var value = /** @type {number} */ (reader.readUint32());
                msg.setRounds(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setStartOffset(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setStartRange(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ccmsg.ColocationPuzzleInfo.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.ccmsg.ColocationPuzzleInfo.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ccmsg.ColocationPuzzleInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ccmsg.ColocationPuzzleInfo.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getGoal_asU8();
    if (f.length > 0) {
        writer.writeBytes(2, f);
    }
    f = message.getRounds();
    if (f !== 0) {
        writer.writeUint32(1, f);
    }
    f = message.getStartOffset();
    if (f !== 0) {
        writer.writeUint64(3, f);
    }
    f = message.getStartRange();
    if (f !== 0) {
        writer.writeUint64(4, f);
    }
};

/**
 * optional bytes goal = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ccmsg.ColocationPuzzleInfo.prototype.getGoal = function() {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * optional bytes goal = 2;
 * This is a type-conversion wrapper around `getGoal()`
 * @return {string}
 */
proto.ccmsg.ColocationPuzzleInfo.prototype.getGoal_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getGoal()));
};

/**
 * optional bytes goal = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGoal()`
 * @return {!Uint8Array}
 */
proto.ccmsg.ColocationPuzzleInfo.prototype.getGoal_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getGoal()));
};

/** @param {!(string|Uint8Array)} value */
proto.ccmsg.ColocationPuzzleInfo.prototype.setGoal = function(value) {
    jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional uint32 rounds = 1;
 * @return {number}
 */
proto.ccmsg.ColocationPuzzleInfo.prototype.getRounds = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {number} value */
proto.ccmsg.ColocationPuzzleInfo.prototype.setRounds = function(value) {
    jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional uint64 start_offset = 3;
 * @return {number}
 */
proto.ccmsg.ColocationPuzzleInfo.prototype.getStartOffset = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/** @param {number} value */
proto.ccmsg.ColocationPuzzleInfo.prototype.setStartOffset = function(value) {
    jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional uint64 start_range = 4;
 * @return {number}
 */
proto.ccmsg.ColocationPuzzleInfo.prototype.getStartRange = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/** @param {number} value */
proto.ccmsg.ColocationPuzzleInfo.prototype.setStartRange = function(value) {
    jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ccmsg.BatchSignature.repeatedFields_ = [2, 3];

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ccmsg.BatchSignature.prototype.toObject = function(opt_includeInstance) {
        return proto.ccmsg.BatchSignature.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ccmsg.BatchSignature} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ccmsg.BatchSignature.toObject = function(includeInstance, msg) {
        var obj = {
            pathDirectionList: jspb.Message.getRepeatedField(msg, 2),
            pathDigestList: msg.getPathDigestList_asB64(),
            rootSignature: msg.getRootSignature_asB64(),
            signingKey:
                (f = msg.getSigningKey()) && proto.ccmsg.PublicKey.toObject(includeInstance, f)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ccmsg.BatchSignature}
 */
proto.ccmsg.BatchSignature.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ccmsg.BatchSignature();
    return proto.ccmsg.BatchSignature.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ccmsg.BatchSignature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ccmsg.BatchSignature}
 */
proto.ccmsg.BatchSignature.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 2:
                var value = /** @type {!Array<boolean>} */ (reader.readPackedBool());
                msg.setPathDirectionList(value);
                break;
            case 3:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.addPathDigest(value);
                break;
            case 4:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setRootSignature(value);
                break;
            case 5:
                var value = new proto.ccmsg.PublicKey();
                reader.readMessage(value, proto.ccmsg.PublicKey.deserializeBinaryFromReader);
                msg.setSigningKey(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ccmsg.BatchSignature.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.ccmsg.BatchSignature.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ccmsg.BatchSignature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ccmsg.BatchSignature.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getPathDirectionList();
    if (f.length > 0) {
        writer.writePackedBool(2, f);
    }
    f = message.getPathDigestList_asU8();
    if (f.length > 0) {
        writer.writeRepeatedBytes(3, f);
    }
    f = message.getRootSignature_asU8();
    if (f.length > 0) {
        writer.writeBytes(4, f);
    }
    f = message.getSigningKey();
    if (f != null) {
        writer.writeMessage(5, f, proto.ccmsg.PublicKey.serializeBinaryToWriter);
    }
};

/**
 * repeated bool path_direction = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {!Array<boolean>}
 */
proto.ccmsg.BatchSignature.prototype.getPathDirectionList = function() {
    return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedField(this, 2));
};

/** @param {!Array<boolean>} value */
proto.ccmsg.BatchSignature.prototype.setPathDirectionList = function(value) {
    jspb.Message.setField(this, 2, value || []);
};

/**
 * @param {boolean} value
 * @param {number=} opt_index
 */
proto.ccmsg.BatchSignature.prototype.addPathDirection = function(value, opt_index) {
    jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 */
proto.ccmsg.BatchSignature.prototype.clearPathDirectionList = function() {
    this.setPathDirectionList([]);
};

/**
 * repeated bytes path_digest = 3;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.ccmsg.BatchSignature.prototype.getPathDigestList = function() {
    return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(
        this,
        3
    ));
};

/**
 * repeated bytes path_digest = 3;
 * This is a type-conversion wrapper around `getPathDigestList()`
 * @return {!Array<string>}
 */
proto.ccmsg.BatchSignature.prototype.getPathDigestList_asB64 = function() {
    return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(this.getPathDigestList()));
};

/**
 * repeated bytes path_digest = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPathDigestList()`
 * @return {!Array<!Uint8Array>}
 */
proto.ccmsg.BatchSignature.prototype.getPathDigestList_asU8 = function() {
    return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
        this.getPathDigestList()
    ));
};

/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.ccmsg.BatchSignature.prototype.setPathDigestList = function(value) {
    jspb.Message.setField(this, 3, value || []);
};

/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.ccmsg.BatchSignature.prototype.addPathDigest = function(value, opt_index) {
    jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 */
proto.ccmsg.BatchSignature.prototype.clearPathDigestList = function() {
    this.setPathDigestList([]);
};

/**
 * optional bytes root_signature = 4;
 * @return {!(string|Uint8Array)}
 */
proto.ccmsg.BatchSignature.prototype.getRootSignature = function() {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * optional bytes root_signature = 4;
 * This is a type-conversion wrapper around `getRootSignature()`
 * @return {string}
 */
proto.ccmsg.BatchSignature.prototype.getRootSignature_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getRootSignature()));
};

/**
 * optional bytes root_signature = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRootSignature()`
 * @return {!Uint8Array}
 */
proto.ccmsg.BatchSignature.prototype.getRootSignature_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getRootSignature()));
};

/** @param {!(string|Uint8Array)} value */
proto.ccmsg.BatchSignature.prototype.setRootSignature = function(value) {
    jspb.Message.setProto3BytesField(this, 4, value);
};

/**
 * optional PublicKey signing_key = 5;
 * @return {?proto.ccmsg.PublicKey}
 */
proto.ccmsg.BatchSignature.prototype.getSigningKey = function() {
    return /** @type{?proto.ccmsg.PublicKey} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.PublicKey,
        5
    ));
};

/** @param {?proto.ccmsg.PublicKey|undefined} value */
proto.ccmsg.BatchSignature.prototype.setSigningKey = function(value) {
    jspb.Message.setWrapperField(this, 5, value);
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.BatchSignature.prototype.clearSigningKey = function() {
    this.setSigningKey(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.BatchSignature.prototype.hasSigningKey = function() {
    return jspb.Message.getField(this, 5) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ccmsg.BlockKey.prototype.toObject = function(opt_includeInstance) {
        return proto.ccmsg.BlockKey.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ccmsg.BlockKey} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ccmsg.BlockKey.toObject = function(includeInstance, msg) {
        var obj = {
            key: msg.getKey_asB64()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ccmsg.BlockKey}
 */
proto.ccmsg.BlockKey.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ccmsg.BlockKey();
    return proto.ccmsg.BlockKey.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ccmsg.BlockKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ccmsg.BlockKey}
 */
proto.ccmsg.BlockKey.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setKey(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ccmsg.BlockKey.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.ccmsg.BlockKey.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ccmsg.BlockKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ccmsg.BlockKey.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getKey_asU8();
    if (f.length > 0) {
        writer.writeBytes(1, f);
    }
};

/**
 * optional bytes key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ccmsg.BlockKey.prototype.getKey = function() {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * optional bytes key = 1;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.ccmsg.BlockKey.prototype.getKey_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getKey()));
};

/**
 * optional bytes key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.ccmsg.BlockKey.prototype.getKey_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getKey()));
};

/** @param {!(string|Uint8Array)} value */
proto.ccmsg.BlockKey.prototype.setKey = function(value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ccmsg.TicketRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.ccmsg.TicketRequest.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ccmsg.TicketRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ccmsg.TicketRequest.toObject = function(includeInstance, msg) {
        var obj = {
            blockIdx: jspb.Message.getFieldWithDefault(msg, 2, 0),
            innerKey: (f = msg.getInnerKey()) && proto.ccmsg.BlockKey.toObject(includeInstance, f),
            blockId: msg.getBlockId_asB64(),
            cachePublicKey:
                (f = msg.getCachePublicKey()) && proto.ccmsg.PublicKey.toObject(includeInstance, f)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ccmsg.TicketRequest}
 */
proto.ccmsg.TicketRequest.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ccmsg.TicketRequest();
    return proto.ccmsg.TicketRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ccmsg.TicketRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ccmsg.TicketRequest}
 */
proto.ccmsg.TicketRequest.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 2:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setBlockIdx(value);
                break;
            case 3:
                var value = new proto.ccmsg.BlockKey();
                reader.readMessage(value, proto.ccmsg.BlockKey.deserializeBinaryFromReader);
                msg.setInnerKey(value);
                break;
            case 5:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setBlockId(value);
                break;
            case 4:
                var value = new proto.ccmsg.PublicKey();
                reader.readMessage(value, proto.ccmsg.PublicKey.deserializeBinaryFromReader);
                msg.setCachePublicKey(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ccmsg.TicketRequest.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.ccmsg.TicketRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ccmsg.TicketRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ccmsg.TicketRequest.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getBlockIdx();
    if (f !== 0) {
        writer.writeUint64(2, f);
    }
    f = message.getInnerKey();
    if (f != null) {
        writer.writeMessage(3, f, proto.ccmsg.BlockKey.serializeBinaryToWriter);
    }
    f = message.getBlockId_asU8();
    if (f.length > 0) {
        writer.writeBytes(5, f);
    }
    f = message.getCachePublicKey();
    if (f != null) {
        writer.writeMessage(4, f, proto.ccmsg.PublicKey.serializeBinaryToWriter);
    }
};

/**
 * optional uint64 block_idx = 2;
 * @return {number}
 */
proto.ccmsg.TicketRequest.prototype.getBlockIdx = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/** @param {number} value */
proto.ccmsg.TicketRequest.prototype.setBlockIdx = function(value) {
    jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional BlockKey inner_key = 3;
 * @return {?proto.ccmsg.BlockKey}
 */
proto.ccmsg.TicketRequest.prototype.getInnerKey = function() {
    return /** @type{?proto.ccmsg.BlockKey} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.BlockKey,
        3
    ));
};

/** @param {?proto.ccmsg.BlockKey|undefined} value */
proto.ccmsg.TicketRequest.prototype.setInnerKey = function(value) {
    jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.TicketRequest.prototype.clearInnerKey = function() {
    this.setInnerKey(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.TicketRequest.prototype.hasInnerKey = function() {
    return jspb.Message.getField(this, 3) != null;
};

/**
 * optional bytes block_id = 5;
 * @return {!(string|Uint8Array)}
 */
proto.ccmsg.TicketRequest.prototype.getBlockId = function() {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * optional bytes block_id = 5;
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {string}
 */
proto.ccmsg.TicketRequest.prototype.getBlockId_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getBlockId()));
};

/**
 * optional bytes block_id = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {!Uint8Array}
 */
proto.ccmsg.TicketRequest.prototype.getBlockId_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getBlockId()));
};

/** @param {!(string|Uint8Array)} value */
proto.ccmsg.TicketRequest.prototype.setBlockId = function(value) {
    jspb.Message.setProto3BytesField(this, 5, value);
};

/**
 * optional PublicKey cache_public_key = 4;
 * @return {?proto.ccmsg.PublicKey}
 */
proto.ccmsg.TicketRequest.prototype.getCachePublicKey = function() {
    return /** @type{?proto.ccmsg.PublicKey} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.PublicKey,
        4
    ));
};

/** @param {?proto.ccmsg.PublicKey|undefined} value */
proto.ccmsg.TicketRequest.prototype.setCachePublicKey = function(value) {
    jspb.Message.setWrapperField(this, 4, value);
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.TicketRequest.prototype.clearCachePublicKey = function() {
    this.setCachePublicKey(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.TicketRequest.prototype.hasCachePublicKey = function() {
    return jspb.Message.getField(this, 4) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ccmsg.TicketL1.prototype.toObject = function(opt_includeInstance) {
        return proto.ccmsg.TicketL1.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ccmsg.TicketL1} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ccmsg.TicketL1.toObject = function(includeInstance, msg) {
        var obj = {
            ticketNo: jspb.Message.getFieldWithDefault(msg, 2, 0),
            cachePublicKey:
                (f = msg.getCachePublicKey()) && proto.ccmsg.PublicKey.toObject(includeInstance, f),
            blockIdx: jspb.Message.getFieldWithDefault(msg, 4, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ccmsg.TicketL1}
 */
proto.ccmsg.TicketL1.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ccmsg.TicketL1();
    return proto.ccmsg.TicketL1.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ccmsg.TicketL1} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ccmsg.TicketL1}
 */
proto.ccmsg.TicketL1.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 2:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setTicketNo(value);
                break;
            case 3:
                var value = new proto.ccmsg.PublicKey();
                reader.readMessage(value, proto.ccmsg.PublicKey.deserializeBinaryFromReader);
                msg.setCachePublicKey(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setBlockIdx(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ccmsg.TicketL1.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.ccmsg.TicketL1.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ccmsg.TicketL1} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ccmsg.TicketL1.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getTicketNo();
    if (f !== 0) {
        writer.writeUint64(2, f);
    }
    f = message.getCachePublicKey();
    if (f != null) {
        writer.writeMessage(3, f, proto.ccmsg.PublicKey.serializeBinaryToWriter);
    }
    f = message.getBlockIdx();
    if (f !== 0) {
        writer.writeUint64(4, f);
    }
};

/**
 * optional uint64 ticket_no = 2;
 * @return {number}
 */
proto.ccmsg.TicketL1.prototype.getTicketNo = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/** @param {number} value */
proto.ccmsg.TicketL1.prototype.setTicketNo = function(value) {
    jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional PublicKey cache_public_key = 3;
 * @return {?proto.ccmsg.PublicKey}
 */
proto.ccmsg.TicketL1.prototype.getCachePublicKey = function() {
    return /** @type{?proto.ccmsg.PublicKey} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.PublicKey,
        3
    ));
};

/** @param {?proto.ccmsg.PublicKey|undefined} value */
proto.ccmsg.TicketL1.prototype.setCachePublicKey = function(value) {
    jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.TicketL1.prototype.clearCachePublicKey = function() {
    this.setCachePublicKey(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.TicketL1.prototype.hasCachePublicKey = function() {
    return jspb.Message.getField(this, 3) != null;
};

/**
 * optional uint64 block_idx = 4;
 * @return {number}
 */
proto.ccmsg.TicketL1.prototype.getBlockIdx = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/** @param {number} value */
proto.ccmsg.TicketL1.prototype.setBlockIdx = function(value) {
    jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ccmsg.TicketL2.repeatedFields_ = [3];

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ccmsg.TicketL2.prototype.toObject = function(opt_includeInstance) {
        return proto.ccmsg.TicketL2.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ccmsg.TicketL2} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ccmsg.TicketL2.toObject = function(includeInstance, msg) {
        var obj = {
            nonce: msg.getNonce_asB64(),
            innerSessionKeyList: jspb.Message.toObjectList(
                msg.getInnerSessionKeyList(),
                proto.ccmsg.BlockKey.toObject,
                includeInstance
            )
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ccmsg.TicketL2}
 */
proto.ccmsg.TicketL2.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ccmsg.TicketL2();
    return proto.ccmsg.TicketL2.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ccmsg.TicketL2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ccmsg.TicketL2}
 */
proto.ccmsg.TicketL2.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setNonce(value);
                break;
            case 3:
                var value = new proto.ccmsg.BlockKey();
                reader.readMessage(value, proto.ccmsg.BlockKey.deserializeBinaryFromReader);
                msg.addInnerSessionKey(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ccmsg.TicketL2.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.ccmsg.TicketL2.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ccmsg.TicketL2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ccmsg.TicketL2.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getNonce_asU8();
    if (f.length > 0) {
        writer.writeBytes(2, f);
    }
    f = message.getInnerSessionKeyList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(3, f, proto.ccmsg.BlockKey.serializeBinaryToWriter);
    }
};

/**
 * optional bytes nonce = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ccmsg.TicketL2.prototype.getNonce = function() {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * optional bytes nonce = 2;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.ccmsg.TicketL2.prototype.getNonce_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getNonce()));
};

/**
 * optional bytes nonce = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.ccmsg.TicketL2.prototype.getNonce_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getNonce()));
};

/** @param {!(string|Uint8Array)} value */
proto.ccmsg.TicketL2.prototype.setNonce = function(value) {
    jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * repeated BlockKey inner_session_key = 3;
 * @return {!Array<!proto.ccmsg.BlockKey>}
 */
proto.ccmsg.TicketL2.prototype.getInnerSessionKeyList = function() {
    return /** @type{!Array<!proto.ccmsg.BlockKey>} */ (jspb.Message.getRepeatedWrapperField(
        this,
        proto.ccmsg.BlockKey,
        3
    ));
};

/** @param {!Array<!proto.ccmsg.BlockKey>} value */
proto.ccmsg.TicketL2.prototype.setInnerSessionKeyList = function(value) {
    jspb.Message.setRepeatedWrapperField(this, 3, value);
};

/**
 * @param {!proto.ccmsg.BlockKey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ccmsg.BlockKey}
 */
proto.ccmsg.TicketL2.prototype.addInnerSessionKey = function(opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(
        this,
        3,
        opt_value,
        proto.ccmsg.BlockKey,
        opt_index
    );
};

/**
 * Clears the list making it empty but non-null.
 */
proto.ccmsg.TicketL2.prototype.clearInnerSessionKeyList = function() {
    this.setInnerSessionKeyList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ccmsg.TicketL2Info.prototype.toObject = function(opt_includeInstance) {
        return proto.ccmsg.TicketL2Info.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ccmsg.TicketL2Info} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ccmsg.TicketL2Info.toObject = function(includeInstance, msg) {
        var obj = {
            encryptedTicketL2: msg.getEncryptedTicketL2_asB64(),
            puzzleSecret: msg.getPuzzleSecret_asB64()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ccmsg.TicketL2Info}
 */
proto.ccmsg.TicketL2Info.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ccmsg.TicketL2Info();
    return proto.ccmsg.TicketL2Info.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ccmsg.TicketL2Info} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ccmsg.TicketL2Info}
 */
proto.ccmsg.TicketL2Info.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setEncryptedTicketL2(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setPuzzleSecret(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ccmsg.TicketL2Info.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.ccmsg.TicketL2Info.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ccmsg.TicketL2Info} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ccmsg.TicketL2Info.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getEncryptedTicketL2_asU8();
    if (f.length > 0) {
        writer.writeBytes(1, f);
    }
    f = message.getPuzzleSecret_asU8();
    if (f.length > 0) {
        writer.writeBytes(2, f);
    }
};

/**
 * optional bytes encrypted_ticket_l2 = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ccmsg.TicketL2Info.prototype.getEncryptedTicketL2 = function() {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * optional bytes encrypted_ticket_l2 = 1;
 * This is a type-conversion wrapper around `getEncryptedTicketL2()`
 * @return {string}
 */
proto.ccmsg.TicketL2Info.prototype.getEncryptedTicketL2_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getEncryptedTicketL2()));
};

/**
 * optional bytes encrypted_ticket_l2 = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncryptedTicketL2()`
 * @return {!Uint8Array}
 */
proto.ccmsg.TicketL2Info.prototype.getEncryptedTicketL2_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getEncryptedTicketL2()));
};

/** @param {!(string|Uint8Array)} value */
proto.ccmsg.TicketL2Info.prototype.setEncryptedTicketL2 = function(value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional bytes puzzle_secret = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ccmsg.TicketL2Info.prototype.getPuzzleSecret = function() {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * optional bytes puzzle_secret = 2;
 * This is a type-conversion wrapper around `getPuzzleSecret()`
 * @return {string}
 */
proto.ccmsg.TicketL2Info.prototype.getPuzzleSecret_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPuzzleSecret()));
};

/**
 * optional bytes puzzle_secret = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPuzzleSecret()`
 * @return {!Uint8Array}
 */
proto.ccmsg.TicketL2Info.prototype.getPuzzleSecret_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPuzzleSecret()));
};

/** @param {!(string|Uint8Array)} value */
proto.ccmsg.TicketL2Info.prototype.setPuzzleSecret = function(value) {
    jspb.Message.setProto3BytesField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ccmsg.Certificate.prototype.toObject = function(opt_includeInstance) {
        return proto.ccmsg.Certificate.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ccmsg.Certificate} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ccmsg.Certificate.toObject = function(includeInstance, msg) {
        var obj = {
            subjectPublicKey:
                (f = msg.getSubjectPublicKey()) &&
                proto.ccmsg.PublicKey.toObject(includeInstance, f),
            escrowId: msg.getEscrowId_asB64(),
            usage: jspb.Message.getFieldWithDefault(msg, 3, ''),
            signature: msg.getSignature_asB64()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ccmsg.Certificate}
 */
proto.ccmsg.Certificate.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ccmsg.Certificate();
    return proto.ccmsg.Certificate.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ccmsg.Certificate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ccmsg.Certificate}
 */
proto.ccmsg.Certificate.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.ccmsg.PublicKey();
                reader.readMessage(value, proto.ccmsg.PublicKey.deserializeBinaryFromReader);
                msg.setSubjectPublicKey(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setEscrowId(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setUsage(value);
                break;
            case 4:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setSignature(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ccmsg.Certificate.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.ccmsg.Certificate.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ccmsg.Certificate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ccmsg.Certificate.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getSubjectPublicKey();
    if (f != null) {
        writer.writeMessage(1, f, proto.ccmsg.PublicKey.serializeBinaryToWriter);
    }
    f = message.getEscrowId_asU8();
    if (f.length > 0) {
        writer.writeBytes(2, f);
    }
    f = message.getUsage();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
    f = message.getSignature_asU8();
    if (f.length > 0) {
        writer.writeBytes(4, f);
    }
};

/**
 * optional PublicKey subject_public_key = 1;
 * @return {?proto.ccmsg.PublicKey}
 */
proto.ccmsg.Certificate.prototype.getSubjectPublicKey = function() {
    return /** @type{?proto.ccmsg.PublicKey} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.PublicKey,
        1
    ));
};

/** @param {?proto.ccmsg.PublicKey|undefined} value */
proto.ccmsg.Certificate.prototype.setSubjectPublicKey = function(value) {
    jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.Certificate.prototype.clearSubjectPublicKey = function() {
    this.setSubjectPublicKey(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.Certificate.prototype.hasSubjectPublicKey = function() {
    return jspb.Message.getField(this, 1) != null;
};

/**
 * optional bytes escrow_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ccmsg.Certificate.prototype.getEscrowId = function() {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * optional bytes escrow_id = 2;
 * This is a type-conversion wrapper around `getEscrowId()`
 * @return {string}
 */
proto.ccmsg.Certificate.prototype.getEscrowId_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getEscrowId()));
};

/**
 * optional bytes escrow_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEscrowId()`
 * @return {!Uint8Array}
 */
proto.ccmsg.Certificate.prototype.getEscrowId_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getEscrowId()));
};

/** @param {!(string|Uint8Array)} value */
proto.ccmsg.Certificate.prototype.setEscrowId = function(value) {
    jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional string usage = 3;
 * @return {string}
 */
proto.ccmsg.Certificate.prototype.getUsage = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/** @param {string} value */
proto.ccmsg.Certificate.prototype.setUsage = function(value) {
    jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional bytes signature = 4;
 * @return {!(string|Uint8Array)}
 */
proto.ccmsg.Certificate.prototype.getSignature = function() {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * optional bytes signature = 4;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.ccmsg.Certificate.prototype.getSignature_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSignature()));
};

/**
 * optional bytes signature = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.ccmsg.Certificate.prototype.getSignature_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getSignature()));
};

/** @param {!(string|Uint8Array)} value */
proto.ccmsg.Certificate.prototype.setSignature = function(value) {
    jspb.Message.setProto3BytesField(this, 4, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ccmsg.TicketBundleSubdigests.repeatedFields_ = [1, 2];

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ccmsg.TicketBundleSubdigests.prototype.toObject = function(opt_includeInstance) {
        return proto.ccmsg.TicketBundleSubdigests.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ccmsg.TicketBundleSubdigests} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ccmsg.TicketBundleSubdigests.toObject = function(includeInstance, msg) {
        var obj = {
            ticketRequestDigestList: msg.getTicketRequestDigestList_asB64(),
            ticketL1DigestList: msg.getTicketL1DigestList_asB64(),
            encryptedTicketL2Digest: msg.getEncryptedTicketL2Digest_asB64(),
            remainderDigest: msg.getRemainderDigest_asB64()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ccmsg.TicketBundleSubdigests}
 */
proto.ccmsg.TicketBundleSubdigests.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ccmsg.TicketBundleSubdigests();
    return proto.ccmsg.TicketBundleSubdigests.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ccmsg.TicketBundleSubdigests} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ccmsg.TicketBundleSubdigests}
 */
proto.ccmsg.TicketBundleSubdigests.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.addTicketRequestDigest(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.addTicketL1Digest(value);
                break;
            case 3:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setEncryptedTicketL2Digest(value);
                break;
            case 4:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setRemainderDigest(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ccmsg.TicketBundleSubdigests.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.ccmsg.TicketBundleSubdigests.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ccmsg.TicketBundleSubdigests} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ccmsg.TicketBundleSubdigests.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getTicketRequestDigestList_asU8();
    if (f.length > 0) {
        writer.writeRepeatedBytes(1, f);
    }
    f = message.getTicketL1DigestList_asU8();
    if (f.length > 0) {
        writer.writeRepeatedBytes(2, f);
    }
    f = message.getEncryptedTicketL2Digest_asU8();
    if (f.length > 0) {
        writer.writeBytes(3, f);
    }
    f = message.getRemainderDigest_asU8();
    if (f.length > 0) {
        writer.writeBytes(4, f);
    }
};

/**
 * repeated bytes ticket_request_digest = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.ccmsg.TicketBundleSubdigests.prototype.getTicketRequestDigestList = function() {
    return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(
        this,
        1
    ));
};

/**
 * repeated bytes ticket_request_digest = 1;
 * This is a type-conversion wrapper around `getTicketRequestDigestList()`
 * @return {!Array<string>}
 */
proto.ccmsg.TicketBundleSubdigests.prototype.getTicketRequestDigestList_asB64 = function() {
    return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
        this.getTicketRequestDigestList()
    ));
};

/**
 * repeated bytes ticket_request_digest = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTicketRequestDigestList()`
 * @return {!Array<!Uint8Array>}
 */
proto.ccmsg.TicketBundleSubdigests.prototype.getTicketRequestDigestList_asU8 = function() {
    return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
        this.getTicketRequestDigestList()
    ));
};

/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.ccmsg.TicketBundleSubdigests.prototype.setTicketRequestDigestList = function(value) {
    jspb.Message.setField(this, 1, value || []);
};

/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.ccmsg.TicketBundleSubdigests.prototype.addTicketRequestDigest = function(value, opt_index) {
    jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 */
proto.ccmsg.TicketBundleSubdigests.prototype.clearTicketRequestDigestList = function() {
    this.setTicketRequestDigestList([]);
};

/**
 * repeated bytes ticket_l1_digest = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.ccmsg.TicketBundleSubdigests.prototype.getTicketL1DigestList = function() {
    return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(
        this,
        2
    ));
};

/**
 * repeated bytes ticket_l1_digest = 2;
 * This is a type-conversion wrapper around `getTicketL1DigestList()`
 * @return {!Array<string>}
 */
proto.ccmsg.TicketBundleSubdigests.prototype.getTicketL1DigestList_asB64 = function() {
    return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
        this.getTicketL1DigestList()
    ));
};

/**
 * repeated bytes ticket_l1_digest = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTicketL1DigestList()`
 * @return {!Array<!Uint8Array>}
 */
proto.ccmsg.TicketBundleSubdigests.prototype.getTicketL1DigestList_asU8 = function() {
    return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
        this.getTicketL1DigestList()
    ));
};

/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.ccmsg.TicketBundleSubdigests.prototype.setTicketL1DigestList = function(value) {
    jspb.Message.setField(this, 2, value || []);
};

/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.ccmsg.TicketBundleSubdigests.prototype.addTicketL1Digest = function(value, opt_index) {
    jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 */
proto.ccmsg.TicketBundleSubdigests.prototype.clearTicketL1DigestList = function() {
    this.setTicketL1DigestList([]);
};

/**
 * optional bytes encrypted_ticket_l2_digest = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ccmsg.TicketBundleSubdigests.prototype.getEncryptedTicketL2Digest = function() {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * optional bytes encrypted_ticket_l2_digest = 3;
 * This is a type-conversion wrapper around `getEncryptedTicketL2Digest()`
 * @return {string}
 */
proto.ccmsg.TicketBundleSubdigests.prototype.getEncryptedTicketL2Digest_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getEncryptedTicketL2Digest()));
};

/**
 * optional bytes encrypted_ticket_l2_digest = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncryptedTicketL2Digest()`
 * @return {!Uint8Array}
 */
proto.ccmsg.TicketBundleSubdigests.prototype.getEncryptedTicketL2Digest_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getEncryptedTicketL2Digest()));
};

/** @param {!(string|Uint8Array)} value */
proto.ccmsg.TicketBundleSubdigests.prototype.setEncryptedTicketL2Digest = function(value) {
    jspb.Message.setProto3BytesField(this, 3, value);
};

/**
 * optional bytes remainder_digest = 4;
 * @return {!(string|Uint8Array)}
 */
proto.ccmsg.TicketBundleSubdigests.prototype.getRemainderDigest = function() {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * optional bytes remainder_digest = 4;
 * This is a type-conversion wrapper around `getRemainderDigest()`
 * @return {string}
 */
proto.ccmsg.TicketBundleSubdigests.prototype.getRemainderDigest_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getRemainderDigest()));
};

/**
 * optional bytes remainder_digest = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRemainderDigest()`
 * @return {!Uint8Array}
 */
proto.ccmsg.TicketBundleSubdigests.prototype.getRemainderDigest_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getRemainderDigest()));
};

/** @param {!(string|Uint8Array)} value */
proto.ccmsg.TicketBundleSubdigests.prototype.setRemainderDigest = function(value) {
    jspb.Message.setProto3BytesField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ccmsg.ContentRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.ccmsg.ContentRequest.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ccmsg.ContentRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ccmsg.ContentRequest.toObject = function(includeInstance, msg) {
        var obj = {
            clientPublicKey:
                (f = msg.getClientPublicKey()) &&
                proto.ccmsg.PublicKey.toObject(includeInstance, f),
            path: jspb.Message.getFieldWithDefault(msg, 2, ''),
            rangeBegin: jspb.Message.getFieldWithDefault(msg, 5, 0),
            rangeEnd: jspb.Message.getFieldWithDefault(msg, 6, 0),
            sequenceNo: jspb.Message.getFieldWithDefault(msg, 4, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ccmsg.ContentRequest}
 */
proto.ccmsg.ContentRequest.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ccmsg.ContentRequest();
    return proto.ccmsg.ContentRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ccmsg.ContentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ccmsg.ContentRequest}
 */
proto.ccmsg.ContentRequest.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.ccmsg.PublicKey();
                reader.readMessage(value, proto.ccmsg.PublicKey.deserializeBinaryFromReader);
                msg.setClientPublicKey(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setPath(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setRangeBegin(value);
                break;
            case 6:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setRangeEnd(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setSequenceNo(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ccmsg.ContentRequest.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.ccmsg.ContentRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ccmsg.ContentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ccmsg.ContentRequest.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getClientPublicKey();
    if (f != null) {
        writer.writeMessage(1, f, proto.ccmsg.PublicKey.serializeBinaryToWriter);
    }
    f = message.getPath();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getRangeBegin();
    if (f !== 0) {
        writer.writeUint64(5, f);
    }
    f = message.getRangeEnd();
    if (f !== 0) {
        writer.writeUint64(6, f);
    }
    f = message.getSequenceNo();
    if (f !== 0) {
        writer.writeUint64(4, f);
    }
};

/**
 * optional PublicKey client_public_key = 1;
 * @return {?proto.ccmsg.PublicKey}
 */
proto.ccmsg.ContentRequest.prototype.getClientPublicKey = function() {
    return /** @type{?proto.ccmsg.PublicKey} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.PublicKey,
        1
    ));
};

/** @param {?proto.ccmsg.PublicKey|undefined} value */
proto.ccmsg.ContentRequest.prototype.setClientPublicKey = function(value) {
    jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.ContentRequest.prototype.clearClientPublicKey = function() {
    this.setClientPublicKey(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.ContentRequest.prototype.hasClientPublicKey = function() {
    return jspb.Message.getField(this, 1) != null;
};

/**
 * optional string path = 2;
 * @return {string}
 */
proto.ccmsg.ContentRequest.prototype.getPath = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.ccmsg.ContentRequest.prototype.setPath = function(value) {
    jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional uint64 range_begin = 5;
 * @return {number}
 */
proto.ccmsg.ContentRequest.prototype.getRangeBegin = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/** @param {number} value */
proto.ccmsg.ContentRequest.prototype.setRangeBegin = function(value) {
    jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional uint64 range_end = 6;
 * @return {number}
 */
proto.ccmsg.ContentRequest.prototype.getRangeEnd = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};

/** @param {number} value */
proto.ccmsg.ContentRequest.prototype.setRangeEnd = function(value) {
    jspb.Message.setProto3IntField(this, 6, value);
};

/**
 * optional uint64 sequence_no = 4;
 * @return {number}
 */
proto.ccmsg.ContentRequest.prototype.getSequenceNo = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/** @param {number} value */
proto.ccmsg.ContentRequest.prototype.setSequenceNo = function(value) {
    jspb.Message.setProto3IntField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ccmsg.ContentResponse.prototype.toObject = function(opt_includeInstance) {
        return proto.ccmsg.ContentResponse.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ccmsg.ContentResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ccmsg.ContentResponse.toObject = function(includeInstance, msg) {
        var obj = {
            requestSequenceNo: jspb.Message.getFieldWithDefault(msg, 1, 0),
            error: (f = msg.getError()) && proto.ccmsg.Error.toObject(includeInstance, f),
            bundle: (f = msg.getBundle()) && proto.ccmsg.TicketBundle.toObject(includeInstance, f)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ccmsg.ContentResponse}
 */
proto.ccmsg.ContentResponse.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ccmsg.ContentResponse();
    return proto.ccmsg.ContentResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ccmsg.ContentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ccmsg.ContentResponse}
 */
proto.ccmsg.ContentResponse.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setRequestSequenceNo(value);
                break;
            case 2:
                var value = new proto.ccmsg.Error();
                reader.readMessage(value, proto.ccmsg.Error.deserializeBinaryFromReader);
                msg.setError(value);
                break;
            case 3:
                var value = new proto.ccmsg.TicketBundle();
                reader.readMessage(value, proto.ccmsg.TicketBundle.deserializeBinaryFromReader);
                msg.setBundle(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ccmsg.ContentResponse.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.ccmsg.ContentResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ccmsg.ContentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ccmsg.ContentResponse.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getRequestSequenceNo();
    if (f !== 0) {
        writer.writeUint64(1, f);
    }
    f = message.getError();
    if (f != null) {
        writer.writeMessage(2, f, proto.ccmsg.Error.serializeBinaryToWriter);
    }
    f = message.getBundle();
    if (f != null) {
        writer.writeMessage(3, f, proto.ccmsg.TicketBundle.serializeBinaryToWriter);
    }
};

/**
 * optional uint64 request_sequence_no = 1;
 * @return {number}
 */
proto.ccmsg.ContentResponse.prototype.getRequestSequenceNo = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {number} value */
proto.ccmsg.ContentResponse.prototype.setRequestSequenceNo = function(value) {
    jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional Error error = 2;
 * @return {?proto.ccmsg.Error}
 */
proto.ccmsg.ContentResponse.prototype.getError = function() {
    return /** @type{?proto.ccmsg.Error} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.Error,
        2
    ));
};

/** @param {?proto.ccmsg.Error|undefined} value */
proto.ccmsg.ContentResponse.prototype.setError = function(value) {
    jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.ContentResponse.prototype.clearError = function() {
    this.setError(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.ContentResponse.prototype.hasError = function() {
    return jspb.Message.getField(this, 2) != null;
};

/**
 * optional TicketBundle bundle = 3;
 * @return {?proto.ccmsg.TicketBundle}
 */
proto.ccmsg.ContentResponse.prototype.getBundle = function() {
    return /** @type{?proto.ccmsg.TicketBundle} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.TicketBundle,
        3
    ));
};

/** @param {?proto.ccmsg.TicketBundle|undefined} value */
proto.ccmsg.ContentResponse.prototype.setBundle = function(value) {
    jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.ContentResponse.prototype.clearBundle = function() {
    this.setBundle(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.ContentResponse.prototype.hasBundle = function() {
    return jspb.Message.getField(this, 3) != null;
};

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ccmsg.ClientCacheRequest.oneofGroups_ = [[5, 6, 7]];

/**
 * @enum {number}
 */
proto.ccmsg.ClientCacheRequest.TicketCase = {
    TICKET_NOT_SET: 0,
    TICKET_REQUEST: 5,
    TICKET_L1: 6,
    TICKET_L2: 7
};

/**
 * @return {proto.ccmsg.ClientCacheRequest.TicketCase}
 */
proto.ccmsg.ClientCacheRequest.prototype.getTicketCase = function() {
    return /** @type {proto.ccmsg.ClientCacheRequest.TicketCase} */ (jspb.Message.computeOneofCase(
        this,
        proto.ccmsg.ClientCacheRequest.oneofGroups_[0]
    ));
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ccmsg.ClientCacheRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.ccmsg.ClientCacheRequest.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ccmsg.ClientCacheRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ccmsg.ClientCacheRequest.toObject = function(includeInstance, msg) {
        var obj = {
            sequenceNo: jspb.Message.getFieldWithDefault(msg, 8, 0),
            bundleRemainder:
                (f = msg.getBundleRemainder()) &&
                proto.ccmsg.TicketBundleRemainder.toObject(includeInstance, f),
            ticketRequest:
                (f = msg.getTicketRequest()) &&
                proto.ccmsg.TicketRequest.toObject(includeInstance, f),
            ticketL1: (f = msg.getTicketL1()) && proto.ccmsg.TicketL1.toObject(includeInstance, f),
            ticketL2:
                (f = msg.getTicketL2()) && proto.ccmsg.TicketL2Info.toObject(includeInstance, f),
            ticketBundleSubdigests:
                (f = msg.getTicketBundleSubdigests()) &&
                proto.ccmsg.TicketBundleSubdigests.toObject(includeInstance, f),
            bundleSig:
                (f = msg.getBundleSig()) && proto.ccmsg.BatchSignature.toObject(includeInstance, f),
            bundleSignerCert:
                (f = msg.getBundleSignerCert()) &&
                proto.ccmsg.Certificate.toObject(includeInstance, f)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ccmsg.ClientCacheRequest}
 */
proto.ccmsg.ClientCacheRequest.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ccmsg.ClientCacheRequest();
    return proto.ccmsg.ClientCacheRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ccmsg.ClientCacheRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ccmsg.ClientCacheRequest}
 */
proto.ccmsg.ClientCacheRequest.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 8:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setSequenceNo(value);
                break;
            case 1:
                var value = new proto.ccmsg.TicketBundleRemainder();
                reader.readMessage(
                    value,
                    proto.ccmsg.TicketBundleRemainder.deserializeBinaryFromReader
                );
                msg.setBundleRemainder(value);
                break;
            case 5:
                var value = new proto.ccmsg.TicketRequest();
                reader.readMessage(value, proto.ccmsg.TicketRequest.deserializeBinaryFromReader);
                msg.setTicketRequest(value);
                break;
            case 6:
                var value = new proto.ccmsg.TicketL1();
                reader.readMessage(value, proto.ccmsg.TicketL1.deserializeBinaryFromReader);
                msg.setTicketL1(value);
                break;
            case 7:
                var value = new proto.ccmsg.TicketL2Info();
                reader.readMessage(value, proto.ccmsg.TicketL2Info.deserializeBinaryFromReader);
                msg.setTicketL2(value);
                break;
            case 2:
                var value = new proto.ccmsg.TicketBundleSubdigests();
                reader.readMessage(
                    value,
                    proto.ccmsg.TicketBundleSubdigests.deserializeBinaryFromReader
                );
                msg.setTicketBundleSubdigests(value);
                break;
            case 3:
                var value = new proto.ccmsg.BatchSignature();
                reader.readMessage(value, proto.ccmsg.BatchSignature.deserializeBinaryFromReader);
                msg.setBundleSig(value);
                break;
            case 4:
                var value = new proto.ccmsg.Certificate();
                reader.readMessage(value, proto.ccmsg.Certificate.deserializeBinaryFromReader);
                msg.setBundleSignerCert(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ccmsg.ClientCacheRequest.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.ccmsg.ClientCacheRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ccmsg.ClientCacheRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ccmsg.ClientCacheRequest.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getSequenceNo();
    if (f !== 0) {
        writer.writeUint64(8, f);
    }
    f = message.getBundleRemainder();
    if (f != null) {
        writer.writeMessage(1, f, proto.ccmsg.TicketBundleRemainder.serializeBinaryToWriter);
    }
    f = message.getTicketRequest();
    if (f != null) {
        writer.writeMessage(5, f, proto.ccmsg.TicketRequest.serializeBinaryToWriter);
    }
    f = message.getTicketL1();
    if (f != null) {
        writer.writeMessage(6, f, proto.ccmsg.TicketL1.serializeBinaryToWriter);
    }
    f = message.getTicketL2();
    if (f != null) {
        writer.writeMessage(7, f, proto.ccmsg.TicketL2Info.serializeBinaryToWriter);
    }
    f = message.getTicketBundleSubdigests();
    if (f != null) {
        writer.writeMessage(2, f, proto.ccmsg.TicketBundleSubdigests.serializeBinaryToWriter);
    }
    f = message.getBundleSig();
    if (f != null) {
        writer.writeMessage(3, f, proto.ccmsg.BatchSignature.serializeBinaryToWriter);
    }
    f = message.getBundleSignerCert();
    if (f != null) {
        writer.writeMessage(4, f, proto.ccmsg.Certificate.serializeBinaryToWriter);
    }
};

/**
 * optional uint64 sequence_no = 8;
 * @return {number}
 */
proto.ccmsg.ClientCacheRequest.prototype.getSequenceNo = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};

/** @param {number} value */
proto.ccmsg.ClientCacheRequest.prototype.setSequenceNo = function(value) {
    jspb.Message.setProto3IntField(this, 8, value);
};

/**
 * optional TicketBundleRemainder bundle_remainder = 1;
 * @return {?proto.ccmsg.TicketBundleRemainder}
 */
proto.ccmsg.ClientCacheRequest.prototype.getBundleRemainder = function() {
    return /** @type{?proto.ccmsg.TicketBundleRemainder} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.TicketBundleRemainder,
        1
    ));
};

/** @param {?proto.ccmsg.TicketBundleRemainder|undefined} value */
proto.ccmsg.ClientCacheRequest.prototype.setBundleRemainder = function(value) {
    jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.ClientCacheRequest.prototype.clearBundleRemainder = function() {
    this.setBundleRemainder(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.ClientCacheRequest.prototype.hasBundleRemainder = function() {
    return jspb.Message.getField(this, 1) != null;
};

/**
 * optional TicketRequest ticket_request = 5;
 * @return {?proto.ccmsg.TicketRequest}
 */
proto.ccmsg.ClientCacheRequest.prototype.getTicketRequest = function() {
    return /** @type{?proto.ccmsg.TicketRequest} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.TicketRequest,
        5
    ));
};

/** @param {?proto.ccmsg.TicketRequest|undefined} value */
proto.ccmsg.ClientCacheRequest.prototype.setTicketRequest = function(value) {
    jspb.Message.setOneofWrapperField(
        this,
        5,
        proto.ccmsg.ClientCacheRequest.oneofGroups_[0],
        value
    );
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.ClientCacheRequest.prototype.clearTicketRequest = function() {
    this.setTicketRequest(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.ClientCacheRequest.prototype.hasTicketRequest = function() {
    return jspb.Message.getField(this, 5) != null;
};

/**
 * optional TicketL1 ticket_l1 = 6;
 * @return {?proto.ccmsg.TicketL1}
 */
proto.ccmsg.ClientCacheRequest.prototype.getTicketL1 = function() {
    return /** @type{?proto.ccmsg.TicketL1} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.TicketL1,
        6
    ));
};

/** @param {?proto.ccmsg.TicketL1|undefined} value */
proto.ccmsg.ClientCacheRequest.prototype.setTicketL1 = function(value) {
    jspb.Message.setOneofWrapperField(
        this,
        6,
        proto.ccmsg.ClientCacheRequest.oneofGroups_[0],
        value
    );
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.ClientCacheRequest.prototype.clearTicketL1 = function() {
    this.setTicketL1(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.ClientCacheRequest.prototype.hasTicketL1 = function() {
    return jspb.Message.getField(this, 6) != null;
};

/**
 * optional TicketL2Info ticket_l2 = 7;
 * @return {?proto.ccmsg.TicketL2Info}
 */
proto.ccmsg.ClientCacheRequest.prototype.getTicketL2 = function() {
    return /** @type{?proto.ccmsg.TicketL2Info} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.TicketL2Info,
        7
    ));
};

/** @param {?proto.ccmsg.TicketL2Info|undefined} value */
proto.ccmsg.ClientCacheRequest.prototype.setTicketL2 = function(value) {
    jspb.Message.setOneofWrapperField(
        this,
        7,
        proto.ccmsg.ClientCacheRequest.oneofGroups_[0],
        value
    );
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.ClientCacheRequest.prototype.clearTicketL2 = function() {
    this.setTicketL2(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.ClientCacheRequest.prototype.hasTicketL2 = function() {
    return jspb.Message.getField(this, 7) != null;
};

/**
 * optional TicketBundleSubdigests ticket_bundle_subdigests = 2;
 * @return {?proto.ccmsg.TicketBundleSubdigests}
 */
proto.ccmsg.ClientCacheRequest.prototype.getTicketBundleSubdigests = function() {
    return /** @type{?proto.ccmsg.TicketBundleSubdigests} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.TicketBundleSubdigests,
        2
    ));
};

/** @param {?proto.ccmsg.TicketBundleSubdigests|undefined} value */
proto.ccmsg.ClientCacheRequest.prototype.setTicketBundleSubdigests = function(value) {
    jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.ClientCacheRequest.prototype.clearTicketBundleSubdigests = function() {
    this.setTicketBundleSubdigests(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.ClientCacheRequest.prototype.hasTicketBundleSubdigests = function() {
    return jspb.Message.getField(this, 2) != null;
};

/**
 * optional BatchSignature bundle_sig = 3;
 * @return {?proto.ccmsg.BatchSignature}
 */
proto.ccmsg.ClientCacheRequest.prototype.getBundleSig = function() {
    return /** @type{?proto.ccmsg.BatchSignature} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.BatchSignature,
        3
    ));
};

/** @param {?proto.ccmsg.BatchSignature|undefined} value */
proto.ccmsg.ClientCacheRequest.prototype.setBundleSig = function(value) {
    jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.ClientCacheRequest.prototype.clearBundleSig = function() {
    this.setBundleSig(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.ClientCacheRequest.prototype.hasBundleSig = function() {
    return jspb.Message.getField(this, 3) != null;
};

/**
 * optional Certificate bundle_signer_cert = 4;
 * @return {?proto.ccmsg.Certificate}
 */
proto.ccmsg.ClientCacheRequest.prototype.getBundleSignerCert = function() {
    return /** @type{?proto.ccmsg.Certificate} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.Certificate,
        4
    ));
};

/** @param {?proto.ccmsg.Certificate|undefined} value */
proto.ccmsg.ClientCacheRequest.prototype.setBundleSignerCert = function(value) {
    jspb.Message.setWrapperField(this, 4, value);
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.ClientCacheRequest.prototype.clearBundleSignerCert = function() {
    this.setBundleSignerCert(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.ClientCacheRequest.prototype.hasBundleSignerCert = function() {
    return jspb.Message.getField(this, 4) != null;
};

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ccmsg.ClientCacheResponse.oneofGroups_ = [[2, 3, 4, 5]];

/**
 * @enum {number}
 */
proto.ccmsg.ClientCacheResponse.MsgCase = {
    MSG_NOT_SET: 0,
    ERROR: 2,
    DATA_RESPONSE: 3,
    L1_RESPONSE: 4,
    L2_RESPONSE: 5
};

/**
 * @return {proto.ccmsg.ClientCacheResponse.MsgCase}
 */
proto.ccmsg.ClientCacheResponse.prototype.getMsgCase = function() {
    return /** @type {proto.ccmsg.ClientCacheResponse.MsgCase} */ (jspb.Message.computeOneofCase(
        this,
        proto.ccmsg.ClientCacheResponse.oneofGroups_[0]
    ));
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ccmsg.ClientCacheResponse.prototype.toObject = function(opt_includeInstance) {
        return proto.ccmsg.ClientCacheResponse.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ccmsg.ClientCacheResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ccmsg.ClientCacheResponse.toObject = function(includeInstance, msg) {
        var obj = {
            requestSequenceNo: jspb.Message.getFieldWithDefault(msg, 1, 0),
            error: (f = msg.getError()) && proto.ccmsg.Error.toObject(includeInstance, f),
            dataResponse:
                (f = msg.getDataResponse()) &&
                proto.ccmsg.ClientCacheResponseData.toObject(includeInstance, f),
            l1Response:
                (f = msg.getL1Response()) &&
                proto.ccmsg.ClientCacheResponseL1.toObject(includeInstance, f),
            l2Response:
                (f = msg.getL2Response()) &&
                proto.ccmsg.ClientCacheResponseL2.toObject(includeInstance, f)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ccmsg.ClientCacheResponse}
 */
proto.ccmsg.ClientCacheResponse.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ccmsg.ClientCacheResponse();
    return proto.ccmsg.ClientCacheResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ccmsg.ClientCacheResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ccmsg.ClientCacheResponse}
 */
proto.ccmsg.ClientCacheResponse.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setRequestSequenceNo(value);
                break;
            case 2:
                var value = new proto.ccmsg.Error();
                reader.readMessage(value, proto.ccmsg.Error.deserializeBinaryFromReader);
                msg.setError(value);
                break;
            case 3:
                var value = new proto.ccmsg.ClientCacheResponseData();
                reader.readMessage(
                    value,
                    proto.ccmsg.ClientCacheResponseData.deserializeBinaryFromReader
                );
                msg.setDataResponse(value);
                break;
            case 4:
                var value = new proto.ccmsg.ClientCacheResponseL1();
                reader.readMessage(
                    value,
                    proto.ccmsg.ClientCacheResponseL1.deserializeBinaryFromReader
                );
                msg.setL1Response(value);
                break;
            case 5:
                var value = new proto.ccmsg.ClientCacheResponseL2();
                reader.readMessage(
                    value,
                    proto.ccmsg.ClientCacheResponseL2.deserializeBinaryFromReader
                );
                msg.setL2Response(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ccmsg.ClientCacheResponse.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.ccmsg.ClientCacheResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ccmsg.ClientCacheResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ccmsg.ClientCacheResponse.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getRequestSequenceNo();
    if (f !== 0) {
        writer.writeUint64(1, f);
    }
    f = message.getError();
    if (f != null) {
        writer.writeMessage(2, f, proto.ccmsg.Error.serializeBinaryToWriter);
    }
    f = message.getDataResponse();
    if (f != null) {
        writer.writeMessage(3, f, proto.ccmsg.ClientCacheResponseData.serializeBinaryToWriter);
    }
    f = message.getL1Response();
    if (f != null) {
        writer.writeMessage(4, f, proto.ccmsg.ClientCacheResponseL1.serializeBinaryToWriter);
    }
    f = message.getL2Response();
    if (f != null) {
        writer.writeMessage(5, f, proto.ccmsg.ClientCacheResponseL2.serializeBinaryToWriter);
    }
};

/**
 * optional uint64 request_sequence_no = 1;
 * @return {number}
 */
proto.ccmsg.ClientCacheResponse.prototype.getRequestSequenceNo = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {number} value */
proto.ccmsg.ClientCacheResponse.prototype.setRequestSequenceNo = function(value) {
    jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional Error error = 2;
 * @return {?proto.ccmsg.Error}
 */
proto.ccmsg.ClientCacheResponse.prototype.getError = function() {
    return /** @type{?proto.ccmsg.Error} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.Error,
        2
    ));
};

/** @param {?proto.ccmsg.Error|undefined} value */
proto.ccmsg.ClientCacheResponse.prototype.setError = function(value) {
    jspb.Message.setOneofWrapperField(
        this,
        2,
        proto.ccmsg.ClientCacheResponse.oneofGroups_[0],
        value
    );
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.ClientCacheResponse.prototype.clearError = function() {
    this.setError(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.ClientCacheResponse.prototype.hasError = function() {
    return jspb.Message.getField(this, 2) != null;
};

/**
 * optional ClientCacheResponseData data_response = 3;
 * @return {?proto.ccmsg.ClientCacheResponseData}
 */
proto.ccmsg.ClientCacheResponse.prototype.getDataResponse = function() {
    return /** @type{?proto.ccmsg.ClientCacheResponseData} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.ClientCacheResponseData,
        3
    ));
};

/** @param {?proto.ccmsg.ClientCacheResponseData|undefined} value */
proto.ccmsg.ClientCacheResponse.prototype.setDataResponse = function(value) {
    jspb.Message.setOneofWrapperField(
        this,
        3,
        proto.ccmsg.ClientCacheResponse.oneofGroups_[0],
        value
    );
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.ClientCacheResponse.prototype.clearDataResponse = function() {
    this.setDataResponse(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.ClientCacheResponse.prototype.hasDataResponse = function() {
    return jspb.Message.getField(this, 3) != null;
};

/**
 * optional ClientCacheResponseL1 l1_response = 4;
 * @return {?proto.ccmsg.ClientCacheResponseL1}
 */
proto.ccmsg.ClientCacheResponse.prototype.getL1Response = function() {
    return /** @type{?proto.ccmsg.ClientCacheResponseL1} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.ClientCacheResponseL1,
        4
    ));
};

/** @param {?proto.ccmsg.ClientCacheResponseL1|undefined} value */
proto.ccmsg.ClientCacheResponse.prototype.setL1Response = function(value) {
    jspb.Message.setOneofWrapperField(
        this,
        4,
        proto.ccmsg.ClientCacheResponse.oneofGroups_[0],
        value
    );
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.ClientCacheResponse.prototype.clearL1Response = function() {
    this.setL1Response(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.ClientCacheResponse.prototype.hasL1Response = function() {
    return jspb.Message.getField(this, 4) != null;
};

/**
 * optional ClientCacheResponseL2 l2_response = 5;
 * @return {?proto.ccmsg.ClientCacheResponseL2}
 */
proto.ccmsg.ClientCacheResponse.prototype.getL2Response = function() {
    return /** @type{?proto.ccmsg.ClientCacheResponseL2} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.ClientCacheResponseL2,
        5
    ));
};

/** @param {?proto.ccmsg.ClientCacheResponseL2|undefined} value */
proto.ccmsg.ClientCacheResponse.prototype.setL2Response = function(value) {
    jspb.Message.setOneofWrapperField(
        this,
        5,
        proto.ccmsg.ClientCacheResponse.oneofGroups_[0],
        value
    );
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.ClientCacheResponse.prototype.clearL2Response = function() {
    this.setL2Response(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.ClientCacheResponse.prototype.hasL2Response = function() {
    return jspb.Message.getField(this, 5) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ccmsg.ClientCacheResponseData.prototype.toObject = function(opt_includeInstance) {
        return proto.ccmsg.ClientCacheResponseData.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ccmsg.ClientCacheResponseData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ccmsg.ClientCacheResponseData.toObject = function(includeInstance, msg) {
        var obj = {
            data: msg.getData_asB64()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ccmsg.ClientCacheResponseData}
 */
proto.ccmsg.ClientCacheResponseData.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ccmsg.ClientCacheResponseData();
    return proto.ccmsg.ClientCacheResponseData.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ccmsg.ClientCacheResponseData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ccmsg.ClientCacheResponseData}
 */
proto.ccmsg.ClientCacheResponseData.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setData(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ccmsg.ClientCacheResponseData.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.ccmsg.ClientCacheResponseData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ccmsg.ClientCacheResponseData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ccmsg.ClientCacheResponseData.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getData_asU8();
    if (f.length > 0) {
        writer.writeBytes(1, f);
    }
};

/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ccmsg.ClientCacheResponseData.prototype.getData = function() {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.ccmsg.ClientCacheResponseData.prototype.getData_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()));
};

/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.ccmsg.ClientCacheResponseData.prototype.getData_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()));
};

/** @param {!(string|Uint8Array)} value */
proto.ccmsg.ClientCacheResponseData.prototype.setData = function(value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ccmsg.ClientCacheResponseL1.prototype.toObject = function(opt_includeInstance) {
        return proto.ccmsg.ClientCacheResponseL1.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ccmsg.ClientCacheResponseL1} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ccmsg.ClientCacheResponseL1.toObject = function(includeInstance, msg) {
        var obj = {
            outerKey: (f = msg.getOuterKey()) && proto.ccmsg.BlockKey.toObject(includeInstance, f)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ccmsg.ClientCacheResponseL1}
 */
proto.ccmsg.ClientCacheResponseL1.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ccmsg.ClientCacheResponseL1();
    return proto.ccmsg.ClientCacheResponseL1.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ccmsg.ClientCacheResponseL1} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ccmsg.ClientCacheResponseL1}
 */
proto.ccmsg.ClientCacheResponseL1.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.ccmsg.BlockKey();
                reader.readMessage(value, proto.ccmsg.BlockKey.deserializeBinaryFromReader);
                msg.setOuterKey(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ccmsg.ClientCacheResponseL1.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.ccmsg.ClientCacheResponseL1.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ccmsg.ClientCacheResponseL1} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ccmsg.ClientCacheResponseL1.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getOuterKey();
    if (f != null) {
        writer.writeMessage(1, f, proto.ccmsg.BlockKey.serializeBinaryToWriter);
    }
};

/**
 * optional BlockKey outer_key = 1;
 * @return {?proto.ccmsg.BlockKey}
 */
proto.ccmsg.ClientCacheResponseL1.prototype.getOuterKey = function() {
    return /** @type{?proto.ccmsg.BlockKey} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.BlockKey,
        1
    ));
};

/** @param {?proto.ccmsg.BlockKey|undefined} value */
proto.ccmsg.ClientCacheResponseL1.prototype.setOuterKey = function(value) {
    jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.ClientCacheResponseL1.prototype.clearOuterKey = function() {
    this.setOuterKey(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.ClientCacheResponseL1.prototype.hasOuterKey = function() {
    return jspb.Message.getField(this, 1) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ccmsg.ClientCacheResponseL2.prototype.toObject = function(opt_includeInstance) {
        return proto.ccmsg.ClientCacheResponseL2.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ccmsg.ClientCacheResponseL2} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ccmsg.ClientCacheResponseL2.toObject = function(includeInstance, msg) {
        var obj = {};

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ccmsg.ClientCacheResponseL2}
 */
proto.ccmsg.ClientCacheResponseL2.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ccmsg.ClientCacheResponseL2();
    return proto.ccmsg.ClientCacheResponseL2.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ccmsg.ClientCacheResponseL2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ccmsg.ClientCacheResponseL2}
 */
proto.ccmsg.ClientCacheResponseL2.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ccmsg.ClientCacheResponseL2.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.ccmsg.ClientCacheResponseL2.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ccmsg.ClientCacheResponseL2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ccmsg.ClientCacheResponseL2.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ccmsg.CacheMissRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.ccmsg.CacheMissRequest.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ccmsg.CacheMissRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ccmsg.CacheMissRequest.toObject = function(includeInstance, msg) {
        var obj = {
            rangeBegin: jspb.Message.getFieldWithDefault(msg, 2, 0),
            rangeEnd: jspb.Message.getFieldWithDefault(msg, 3, 0),
            objectId: msg.getObjectId_asB64()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ccmsg.CacheMissRequest}
 */
proto.ccmsg.CacheMissRequest.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ccmsg.CacheMissRequest();
    return proto.ccmsg.CacheMissRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ccmsg.CacheMissRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ccmsg.CacheMissRequest}
 */
proto.ccmsg.CacheMissRequest.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 2:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setRangeBegin(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setRangeEnd(value);
                break;
            case 4:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setObjectId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ccmsg.CacheMissRequest.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.ccmsg.CacheMissRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ccmsg.CacheMissRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ccmsg.CacheMissRequest.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getRangeBegin();
    if (f !== 0) {
        writer.writeUint64(2, f);
    }
    f = message.getRangeEnd();
    if (f !== 0) {
        writer.writeUint64(3, f);
    }
    f = message.getObjectId_asU8();
    if (f.length > 0) {
        writer.writeBytes(4, f);
    }
};

/**
 * optional uint64 range_begin = 2;
 * @return {number}
 */
proto.ccmsg.CacheMissRequest.prototype.getRangeBegin = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/** @param {number} value */
proto.ccmsg.CacheMissRequest.prototype.setRangeBegin = function(value) {
    jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional uint64 range_end = 3;
 * @return {number}
 */
proto.ccmsg.CacheMissRequest.prototype.getRangeEnd = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/** @param {number} value */
proto.ccmsg.CacheMissRequest.prototype.setRangeEnd = function(value) {
    jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional bytes object_id = 4;
 * @return {!(string|Uint8Array)}
 */
proto.ccmsg.CacheMissRequest.prototype.getObjectId = function() {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * optional bytes object_id = 4;
 * This is a type-conversion wrapper around `getObjectId()`
 * @return {string}
 */
proto.ccmsg.CacheMissRequest.prototype.getObjectId_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getObjectId()));
};

/**
 * optional bytes object_id = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getObjectId()`
 * @return {!Uint8Array}
 */
proto.ccmsg.CacheMissRequest.prototype.getObjectId_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getObjectId()));
};

/** @param {!(string|Uint8Array)} value */
proto.ccmsg.CacheMissRequest.prototype.setObjectId = function(value) {
    jspb.Message.setProto3BytesField(this, 4, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ccmsg.CacheMissResponse.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ccmsg.CacheMissResponse.prototype.toObject = function(opt_includeInstance) {
        return proto.ccmsg.CacheMissResponse.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ccmsg.CacheMissResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ccmsg.CacheMissResponse.toObject = function(includeInstance, msg) {
        var obj = {
            metadata:
                (f = msg.getMetadata()) && proto.ccmsg.ObjectMetadata.toObject(includeInstance, f),
            chunksList: jspb.Message.toObjectList(
                msg.getChunksList(),
                proto.ccmsg.Chunk.toObject,
                includeInstance
            )
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ccmsg.CacheMissResponse}
 */
proto.ccmsg.CacheMissResponse.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ccmsg.CacheMissResponse();
    return proto.ccmsg.CacheMissResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ccmsg.CacheMissResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ccmsg.CacheMissResponse}
 */
proto.ccmsg.CacheMissResponse.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.ccmsg.ObjectMetadata();
                reader.readMessage(value, proto.ccmsg.ObjectMetadata.deserializeBinaryFromReader);
                msg.setMetadata(value);
                break;
            case 2:
                var value = new proto.ccmsg.Chunk();
                reader.readMessage(value, proto.ccmsg.Chunk.deserializeBinaryFromReader);
                msg.addChunks(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ccmsg.CacheMissResponse.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.ccmsg.CacheMissResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ccmsg.CacheMissResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ccmsg.CacheMissResponse.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getMetadata();
    if (f != null) {
        writer.writeMessage(1, f, proto.ccmsg.ObjectMetadata.serializeBinaryToWriter);
    }
    f = message.getChunksList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(2, f, proto.ccmsg.Chunk.serializeBinaryToWriter);
    }
};

/**
 * optional ObjectMetadata metadata = 1;
 * @return {?proto.ccmsg.ObjectMetadata}
 */
proto.ccmsg.CacheMissResponse.prototype.getMetadata = function() {
    return /** @type{?proto.ccmsg.ObjectMetadata} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.ObjectMetadata,
        1
    ));
};

/** @param {?proto.ccmsg.ObjectMetadata|undefined} value */
proto.ccmsg.CacheMissResponse.prototype.setMetadata = function(value) {
    jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.CacheMissResponse.prototype.clearMetadata = function() {
    this.setMetadata(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.CacheMissResponse.prototype.hasMetadata = function() {
    return jspb.Message.getField(this, 1) != null;
};

/**
 * repeated Chunk chunks = 2;
 * @return {!Array<!proto.ccmsg.Chunk>}
 */
proto.ccmsg.CacheMissResponse.prototype.getChunksList = function() {
    return /** @type{!Array<!proto.ccmsg.Chunk>} */ (jspb.Message.getRepeatedWrapperField(
        this,
        proto.ccmsg.Chunk,
        2
    ));
};

/** @param {!Array<!proto.ccmsg.Chunk>} value */
proto.ccmsg.CacheMissResponse.prototype.setChunksList = function(value) {
    jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.ccmsg.Chunk=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ccmsg.Chunk}
 */
proto.ccmsg.CacheMissResponse.prototype.addChunks = function(opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ccmsg.Chunk, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 */
proto.ccmsg.CacheMissResponse.prototype.clearChunksList = function() {
    this.setChunksList([]);
};

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ccmsg.Chunk.oneofGroups_ = [[10, 20]];

/**
 * @enum {number}
 */
proto.ccmsg.Chunk.SourceCase = {
    SOURCE_NOT_SET: 0,
    HTTP: 10,
    INLINE: 20
};

/**
 * @return {proto.ccmsg.Chunk.SourceCase}
 */
proto.ccmsg.Chunk.prototype.getSourceCase = function() {
    return /** @type {proto.ccmsg.Chunk.SourceCase} */ (jspb.Message.computeOneofCase(
        this,
        proto.ccmsg.Chunk.oneofGroups_[0]
    ));
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ccmsg.Chunk.prototype.toObject = function(opt_includeInstance) {
        return proto.ccmsg.Chunk.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ccmsg.Chunk} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ccmsg.Chunk.toObject = function(includeInstance, msg) {
        var obj = {
            slotIdx: jspb.Message.getFieldWithDefault(msg, 1, 0),
            http: (f = msg.getHttp()) && proto.ccmsg.BlockSourceHTTP.toObject(includeInstance, f),
            inline:
                (f = msg.getInline()) && proto.ccmsg.BlockSourceInline.toObject(includeInstance, f)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ccmsg.Chunk}
 */
proto.ccmsg.Chunk.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ccmsg.Chunk();
    return proto.ccmsg.Chunk.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ccmsg.Chunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ccmsg.Chunk}
 */
proto.ccmsg.Chunk.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setSlotIdx(value);
                break;
            case 10:
                var value = new proto.ccmsg.BlockSourceHTTP();
                reader.readMessage(value, proto.ccmsg.BlockSourceHTTP.deserializeBinaryFromReader);
                msg.setHttp(value);
                break;
            case 20:
                var value = new proto.ccmsg.BlockSourceInline();
                reader.readMessage(
                    value,
                    proto.ccmsg.BlockSourceInline.deserializeBinaryFromReader
                );
                msg.setInline(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ccmsg.Chunk.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.ccmsg.Chunk.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ccmsg.Chunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ccmsg.Chunk.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getSlotIdx();
    if (f !== 0) {
        writer.writeUint64(1, f);
    }
    f = message.getHttp();
    if (f != null) {
        writer.writeMessage(10, f, proto.ccmsg.BlockSourceHTTP.serializeBinaryToWriter);
    }
    f = message.getInline();
    if (f != null) {
        writer.writeMessage(20, f, proto.ccmsg.BlockSourceInline.serializeBinaryToWriter);
    }
};

/**
 * optional uint64 slot_idx = 1;
 * @return {number}
 */
proto.ccmsg.Chunk.prototype.getSlotIdx = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {number} value */
proto.ccmsg.Chunk.prototype.setSlotIdx = function(value) {
    jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional BlockSourceHTTP http = 10;
 * @return {?proto.ccmsg.BlockSourceHTTP}
 */
proto.ccmsg.Chunk.prototype.getHttp = function() {
    return /** @type{?proto.ccmsg.BlockSourceHTTP} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.BlockSourceHTTP,
        10
    ));
};

/** @param {?proto.ccmsg.BlockSourceHTTP|undefined} value */
proto.ccmsg.Chunk.prototype.setHttp = function(value) {
    jspb.Message.setOneofWrapperField(this, 10, proto.ccmsg.Chunk.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.Chunk.prototype.clearHttp = function() {
    this.setHttp(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.Chunk.prototype.hasHttp = function() {
    return jspb.Message.getField(this, 10) != null;
};

/**
 * optional BlockSourceInline inline = 20;
 * @return {?proto.ccmsg.BlockSourceInline}
 */
proto.ccmsg.Chunk.prototype.getInline = function() {
    return /** @type{?proto.ccmsg.BlockSourceInline} */ (jspb.Message.getWrapperField(
        this,
        proto.ccmsg.BlockSourceInline,
        20
    ));
};

/** @param {?proto.ccmsg.BlockSourceInline|undefined} value */
proto.ccmsg.Chunk.prototype.setInline = function(value) {
    jspb.Message.setOneofWrapperField(this, 20, proto.ccmsg.Chunk.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 */
proto.ccmsg.Chunk.prototype.clearInline = function() {
    this.setInline(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ccmsg.Chunk.prototype.hasInline = function() {
    return jspb.Message.getField(this, 20) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ccmsg.BlockSourceHTTP.prototype.toObject = function(opt_includeInstance) {
        return proto.ccmsg.BlockSourceHTTP.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ccmsg.BlockSourceHTTP} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ccmsg.BlockSourceHTTP.toObject = function(includeInstance, msg) {
        var obj = {
            url: jspb.Message.getFieldWithDefault(msg, 1, ''),
            rangeBegin: jspb.Message.getFieldWithDefault(msg, 2, 0),
            rangeEnd: jspb.Message.getFieldWithDefault(msg, 3, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ccmsg.BlockSourceHTTP}
 */
proto.ccmsg.BlockSourceHTTP.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ccmsg.BlockSourceHTTP();
    return proto.ccmsg.BlockSourceHTTP.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ccmsg.BlockSourceHTTP} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ccmsg.BlockSourceHTTP}
 */
proto.ccmsg.BlockSourceHTTP.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setUrl(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setRangeBegin(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setRangeEnd(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ccmsg.BlockSourceHTTP.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.ccmsg.BlockSourceHTTP.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ccmsg.BlockSourceHTTP} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ccmsg.BlockSourceHTTP.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getUrl();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getRangeBegin();
    if (f !== 0) {
        writer.writeUint64(2, f);
    }
    f = message.getRangeEnd();
    if (f !== 0) {
        writer.writeUint64(3, f);
    }
};

/**
 * optional string url = 1;
 * @return {string}
 */
proto.ccmsg.BlockSourceHTTP.prototype.getUrl = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.ccmsg.BlockSourceHTTP.prototype.setUrl = function(value) {
    jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional uint64 range_begin = 2;
 * @return {number}
 */
proto.ccmsg.BlockSourceHTTP.prototype.getRangeBegin = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/** @param {number} value */
proto.ccmsg.BlockSourceHTTP.prototype.setRangeBegin = function(value) {
    jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional uint64 range_end = 3;
 * @return {number}
 */
proto.ccmsg.BlockSourceHTTP.prototype.getRangeEnd = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/** @param {number} value */
proto.ccmsg.BlockSourceHTTP.prototype.setRangeEnd = function(value) {
    jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ccmsg.BlockSourceInline.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ccmsg.BlockSourceInline.prototype.toObject = function(opt_includeInstance) {
        return proto.ccmsg.BlockSourceInline.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ccmsg.BlockSourceInline} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ccmsg.BlockSourceInline.toObject = function(includeInstance, msg) {
        var obj = {
            blockList: msg.getBlockList_asB64()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ccmsg.BlockSourceInline}
 */
proto.ccmsg.BlockSourceInline.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ccmsg.BlockSourceInline();
    return proto.ccmsg.BlockSourceInline.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ccmsg.BlockSourceInline} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ccmsg.BlockSourceInline}
 */
proto.ccmsg.BlockSourceInline.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.addBlock(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ccmsg.BlockSourceInline.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.ccmsg.BlockSourceInline.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ccmsg.BlockSourceInline} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ccmsg.BlockSourceInline.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getBlockList_asU8();
    if (f.length > 0) {
        writer.writeRepeatedBytes(1, f);
    }
};

/**
 * repeated bytes block = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.ccmsg.BlockSourceInline.prototype.getBlockList = function() {
    return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(
        this,
        1
    ));
};

/**
 * repeated bytes block = 1;
 * This is a type-conversion wrapper around `getBlockList()`
 * @return {!Array<string>}
 */
proto.ccmsg.BlockSourceInline.prototype.getBlockList_asB64 = function() {
    return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(this.getBlockList()));
};

/**
 * repeated bytes block = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockList()`
 * @return {!Array<!Uint8Array>}
 */
proto.ccmsg.BlockSourceInline.prototype.getBlockList_asU8 = function() {
    return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(this.getBlockList()));
};

/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.ccmsg.BlockSourceInline.prototype.setBlockList = function(value) {
    jspb.Message.setField(this, 1, value || []);
};

/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.ccmsg.BlockSourceInline.prototype.addBlock = function(value, opt_index) {
    jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 */
proto.ccmsg.BlockSourceInline.prototype.clearBlockList = function() {
    this.setBlockList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ccmsg.ObjectMetadata.prototype.toObject = function(opt_includeInstance) {
        return proto.ccmsg.ObjectMetadata.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ccmsg.ObjectMetadata} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ccmsg.ObjectMetadata.toObject = function(includeInstance, msg) {
        var obj = {
            objectSize: jspb.Message.getFieldWithDefault(msg, 1, 0),
            blockSize: jspb.Message.getFieldWithDefault(msg, 2, 0),
            etag: msg.getEtag_asB64(),
            lastModified: jspb.Message.getFieldWithDefault(msg, 5, ''),
            cacheExpiration: jspb.Message.getFieldWithDefault(msg, 6, '')
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ccmsg.ObjectMetadata}
 */
proto.ccmsg.ObjectMetadata.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ccmsg.ObjectMetadata();
    return proto.ccmsg.ObjectMetadata.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ccmsg.ObjectMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ccmsg.ObjectMetadata}
 */
proto.ccmsg.ObjectMetadata.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setObjectSize(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setBlockSize(value);
                break;
            case 4:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setEtag(value);
                break;
            case 5:
                var value = /** @type {string} */ (reader.readString());
                msg.setLastModified(value);
                break;
            case 6:
                var value = /** @type {string} */ (reader.readString());
                msg.setCacheExpiration(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ccmsg.ObjectMetadata.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.ccmsg.ObjectMetadata.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ccmsg.ObjectMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ccmsg.ObjectMetadata.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getObjectSize();
    if (f !== 0) {
        writer.writeUint64(1, f);
    }
    f = message.getBlockSize();
    if (f !== 0) {
        writer.writeUint64(2, f);
    }
    f = message.getEtag_asU8();
    if (f.length > 0) {
        writer.writeBytes(4, f);
    }
    f = message.getLastModified();
    if (f.length > 0) {
        writer.writeString(5, f);
    }
    f = message.getCacheExpiration();
    if (f.length > 0) {
        writer.writeString(6, f);
    }
};

/**
 * optional uint64 object_size = 1;
 * @return {number}
 */
proto.ccmsg.ObjectMetadata.prototype.getObjectSize = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {number} value */
proto.ccmsg.ObjectMetadata.prototype.setObjectSize = function(value) {
    jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional uint64 block_size = 2;
 * @return {number}
 */
proto.ccmsg.ObjectMetadata.prototype.getBlockSize = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/** @param {number} value */
proto.ccmsg.ObjectMetadata.prototype.setBlockSize = function(value) {
    jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional bytes etag = 4;
 * @return {!(string|Uint8Array)}
 */
proto.ccmsg.ObjectMetadata.prototype.getEtag = function() {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * optional bytes etag = 4;
 * This is a type-conversion wrapper around `getEtag()`
 * @return {string}
 */
proto.ccmsg.ObjectMetadata.prototype.getEtag_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getEtag()));
};

/**
 * optional bytes etag = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEtag()`
 * @return {!Uint8Array}
 */
proto.ccmsg.ObjectMetadata.prototype.getEtag_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getEtag()));
};

/** @param {!(string|Uint8Array)} value */
proto.ccmsg.ObjectMetadata.prototype.setEtag = function(value) {
    jspb.Message.setProto3BytesField(this, 4, value);
};

/**
 * optional string last_modified = 5;
 * @return {string}
 */
proto.ccmsg.ObjectMetadata.prototype.getLastModified = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/** @param {string} value */
proto.ccmsg.ObjectMetadata.prototype.setLastModified = function(value) {
    jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional string cache_expiration = 6;
 * @return {string}
 */
proto.ccmsg.ObjectMetadata.prototype.getCacheExpiration = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''));
};

/** @param {string} value */
proto.ccmsg.ObjectMetadata.prototype.setCacheExpiration = function(value) {
    jspb.Message.setProto3StringField(this, 6, value);
};

goog.object.extend(exports, proto.ccmsg);
