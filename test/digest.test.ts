// TODO: move this to digest module
import * as util from '../src/util';
import {
    TicketBundleSubdigests,
    TicketRequest,
    BlockKey,
    PublicKey,
    ColocationPuzzleInfo,
    TicketBundleRemainder,
    TicketBundle,
    TicketL1
} from '../src/proto/cachecash_pb';
import { Crypto } from '@peculiar/webcrypto';

const crypto = new Crypto();

describe('digest calculation', () => {
    it('TicketBundleSubdigestsCanonicalDigest', async () => {
        const m = new TicketBundleSubdigests();
        m.setTicketRequestDigestList([
            new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]),
            new Uint8Array([4, 5, 6, 7, 8, 9, 0, 1, 2, 3]),
            new Uint8Array([7, 8, 9, 0, 1, 2, 3, 4, 5, 6]),
            new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
        ]);
        m.setTicketL1DigestList([
            new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]),
            new Uint8Array([4, 5, 6, 7, 8, 9, 0, 1, 2, 3]),
            new Uint8Array([7, 8, 9, 0, 1, 2, 3, 4, 5, 6]),
            new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
        ]);
        m.setEncryptedTicketL2Digest(new Uint8Array([1, 2, 3, 4, 5]));
        m.setRemainderDigest(new Uint8Array([6, 7, 8, 9, 0]));

        const digest = await util.ticketBundleSubdigestsCanonicalDigest(m);
        expect(digest).toEqual(
            new Uint8Array([
                0x17,
                0x3d,
                0x8e,
                0x4b,
                0x4b,
                0xcb,
                0x34,
                0x61,
                0x59,
                0x4a,
                0x95,
                0x3d,
                0x43,
                0xd9,
                0xfa,
                0xe2,
                0x4a,
                0x76,
                0x70,
                0x38,
                0x75,
                0x8e,
                0x36,
                0x5f,
                0xc0,
                0xae,
                0x23,
                0x62,
                0x33,
                0x5e,
                0xa0,
                0x97,
                0x79,
                0x52,
                0xfb,
                0x79,
                0x17,
                0x43,
                0x27,
                0xa7,
                0x3e,
                0x1c,
                0xf4,
                0xea,
                0x7,
                0x30,
                0xb,
                0xf6
            ])
        );
    });

    it('TicketBundleSubdigestsCanonicalDigest2', async () => {
        const m = new TicketBundleSubdigests();
        m.setTicketRequestDigestList([
            new Uint8Array([
                0x91,
                0xfa,
                0x25,
                0xdf,
                0xc1,
                0xc8,
                0xfb,
                0xee,
                0xc,
                0x93,
                0xfa,
                0xad,
                0xe8,
                0x0,
                0xac,
                0x28,
                0xe0,
                0xda,
                0x2f,
                0x66,
                0x32,
                0xf5,
                0xd9,
                0xf2,
                0x53,
                0xd2,
                0xe4,
                0x9b,
                0x47,
                0xb5,
                0x41,
                0x30,
                0x32,
                0x96,
                0x31,
                0xe1,
                0xbc,
                0xa3,
                0x2a,
                0x44,
                0xaa,
                0x46,
                0x9,
                0x4c,
                0xd6,
                0x43,
                0xa1,
                0x6
            ]),
            new Uint8Array([
                0xdf,
                0x33,
                0xf,
                0x5b,
                0x60,
                0xc1,
                0xf5,
                0xaf,
                0xc5,
                0x74,
                0x72,
                0xe7,
                0xf2,
                0xb6,
                0xb0,
                0xe1,
                0x64,
                0xdf,
                0xb9,
                0x0,
                0x32,
                0x82,
                0x2a,
                0x43,
                0x5c,
                0x6f,
                0x60,
                0x65,
                0x9c,
                0x2f,
                0x92,
                0x83,
                0xdb,
                0xc3,
                0xf4,
                0x8d,
                0xf2,
                0x94,
                0x56,
                0xcd,
                0x79,
                0x66,
                0x72,
                0xfe,
                0xad,
                0xc9,
                0x2b,
                0x4b
            ]),
            new Uint8Array([
                0xdc,
                0x5f,
                0x42,
                0x8f,
                0xe7,
                0x95,
                0xbf,
                0xa,
                0xaa,
                0xd6,
                0x3a,
                0x97,
                0xd9,
                0xb1,
                0xb8,
                0x17,
                0x78,
                0xc2,
                0x5c,
                0x87,
                0x89,
                0xa3,
                0xa3,
                0xfd,
                0x88,
                0xa1,
                0x54,
                0x3d,
                0x33,
                0xf,
                0x3,
                0xc0,
                0x5f,
                0x8f,
                0xbf,
                0xbe,
                0x56,
                0xce,
                0x1e,
                0x72,
                0xdd,
                0x5c,
                0xb2,
                0x31,
                0xaa,
                0x25,
                0xc9,
                0x3e
            ]),
            new Uint8Array([
                0xda,
                0x73,
                0xa6,
                0xd6,
                0xbb,
                0x17,
                0x97,
                0xdd,
                0x6f,
                0xbf,
                0xdc,
                0x16,
                0xa8,
                0x6f,
                0x1,
                0x5a,
                0xbb,
                0xf5,
                0x32,
                0x8d,
                0x58,
                0x41,
                0xbc,
                0x6f,
                0xe1,
                0xc9,
                0xe,
                0x6,
                0xfa,
                0x8c,
                0x58,
                0xa8,
                0x3d,
                0x5c,
                0xbe,
                0x54,
                0x92,
                0xcd,
                0x1d,
                0xea,
                0x8c,
                0x6a,
                0x27,
                0x35,
                0xd0,
                0x39,
                0xef,
                0x5b
            ])
        ]);
        m.setTicketL1DigestList([
            new Uint8Array([
                0x91,
                0xfa,
                0x25,
                0xdf,
                0xc1,
                0xc8,
                0xfb,
                0xee,
                0xc,
                0x93,
                0xfa,
                0xad,
                0xe8,
                0x0,
                0xac,
                0x28,
                0xe0,
                0xda,
                0x2f,
                0x66,
                0x32,
                0xf5,
                0xd9,
                0xf2,
                0x53,
                0xd2,
                0xe4,
                0x9b,
                0x47,
                0xb5,
                0x41,
                0x30,
                0x32,
                0x96,
                0x31,
                0xe1,
                0xbc,
                0xa3,
                0x2a,
                0x44,
                0xaa,
                0x46,
                0x9,
                0x4c,
                0xd6,
                0x43,
                0xa1,
                0x6
            ]),
            new Uint8Array([
                0x73,
                0xe7,
                0xd9,
                0xe2,
                0xb8,
                0xf5,
                0x66,
                0x2f,
                0xc8,
                0x19,
                0x69,
                0x92,
                0x90,
                0xb8,
                0xc2,
                0xe9,
                0x8b,
                0x49,
                0xe9,
                0x90,
                0xf4,
                0x0,
                0x3e,
                0x1b,
                0xc1,
                0x54,
                0xe6,
                0x3,
                0xc2,
                0x47,
                0x72,
                0xb9,
                0x5f,
                0x7e,
                0xb0,
                0xbf,
                0xb8,
                0xad,
                0x96,
                0x86,
                0x3f,
                0xfd,
                0xaf,
                0x7a,
                0x5a,
                0xac,
                0xa9,
                0xe1
            ]),
            new Uint8Array([
                0xb3,
                0x14,
                0x64,
                0x94,
                0xf9,
                0xb5,
                0x83,
                0xa9,
                0x11,
                0x2c,
                0x98,
                0x29,
                0x1f,
                0x27,
                0x5c,
                0x6d,
                0x88,
                0x0,
                0xcc,
                0x38,
                0x49,
                0x23,
                0x97,
                0x60,
                0x9e,
                0x72,
                0x5a,
                0x79,
                0x4c,
                0xe5,
                0xbe,
                0xd9,
                0x45,
                0xc,
                0xac,
                0xdf,
                0x9f,
                0xee,
                0x5,
                0x15,
                0x62,
                0x9b,
                0x6a,
                0x41,
                0x7e,
                0x2b,
                0xa0,
                0x2e
            ]),
            new Uint8Array([
                0x3c,
                0x66,
                0x4a,
                0xf0,
                0x39,
                0x49,
                0xb4,
                0x4f,
                0xdc,
                0xb,
                0x61,
                0x5c,
                0x9,
                0x9e,
                0x4c,
                0xaa,
                0x2b,
                0x87,
                0xe9,
                0xe9,
                0x20,
                0x17,
                0x78,
                0x31,
                0x37,
                0x46,
                0x90,
                0xfd,
                0x2b,
                0x93,
                0xcc,
                0x68,
                0x9d,
                0xe3,
                0x95,
                0x89,
                0xd4,
                0x24,
                0xdd,
                0xca,
                0x38,
                0xd2,
                0x34,
                0x96,
                0xd9,
                0xa0,
                0x84,
                0x48
            ])
        ]);
        m.setEncryptedTicketL2Digest(
            new Uint8Array([
                0x6,
                0xaf,
                0x1,
                0xff,
                0xa7,
                0x5d,
                0x9a,
                0x6,
                0xa7,
                0xee,
                0x27,
                0x3a,
                0xb,
                0x49,
                0x73,
                0x28,
                0xf8,
                0x71,
                0x2,
                0x37,
                0x6f,
                0x99,
                0xe2,
                0xec,
                0xc1,
                0x59,
                0xa9,
                0xdc,
                0xf6,
                0x1e,
                0xbe,
                0x93,
                0xb,
                0x14,
                0xfe,
                0xac,
                0xd9,
                0x6c,
                0xc6,
                0x7c,
                0x26,
                0xe3,
                0xb6,
                0x89,
                0x7f,
                0x9f,
                0x2f,
                0x24
            ])
        );
        m.setRemainderDigest(
            new Uint8Array([
                0xcd,
                0xfc,
                0x55,
                0xe4,
                0x93,
                0x41,
                0x9b,
                0xa8,
                0x80,
                0xb2,
                0x87,
                0x23,
                0xcc,
                0xeb,
                0xd7,
                0x24,
                0x5c,
                0x28,
                0xe,
                0xa2,
                0xba,
                0x2b,
                0x4b,
                0x1b,
                0x50,
                0xe5,
                0x33,
                0xca,
                0x54,
                0xf1,
                0x55,
                0xfe,
                0x83,
                0xe0,
                0x9f,
                0x6,
                0xbf,
                0x9,
                0xf3,
                0x49,
                0x86,
                0xc4,
                0x46,
                0x50,
                0xd9,
                0xb,
                0x88,
                0xc8
            ])
        );

        const digest = await util.ticketBundleSubdigestsCanonicalDigest(m);
        expect(digest).toEqual(
            new Uint8Array([
                205,
                113,
                79,
                29,
                98,
                0,
                129,
                151,
                123,
                220,
                167,
                70,
                90,
                219,
                120,
                191,
                238,
                254,
                122,
                141,
                159,
                71,
                238,
                244,
                159,
                89,
                186,
                244,
                138,
                78,
                87,
                82,
                148,
                218,
                191,
                1,
                247,
                19,
                59,
                54,
                251,
                146,
                56,
                151,
                146,
                216,
                155,
                151
            ])
        );
    });

    it('TicketBundleSubdigestsCanonicalTicketRequestDigest', async () => {
        const m = new TicketBundleSubdigests();
        m.setTicketRequestDigestList([
            new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]),
            new Uint8Array([4, 5, 6, 7, 8, 9, 0, 1, 2, 3]),
            new Uint8Array([7, 8, 9, 0, 1, 2, 3, 4, 5, 6]),
            new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
        ]);

        const digest = await util.canonicalTicketRequestDigest(m);
        expect(digest).toEqual(
            new Uint8Array([
                0x71,
                0xc2,
                0x5a,
                0x8c,
                0x90,
                0x70,
                0x77,
                0x38,
                0x97,
                0x2a,
                0x6f,
                0x87,
                0xc2,
                0x73,
                0x33,
                0x61,
                0x56,
                0x26,
                0xa,
                0xb,
                0x80,
                0xcb,
                0xcd,
                0x9e,
                0xf8,
                0x1a,
                0x1a,
                0xc1,
                0xcd,
                0x74,
                0x94,
                0x5d,
                0xd9,
                0x25,
                0x43,
                0xba,
                0x77,
                0x44,
                0x82,
                0x19,
                0x10,
                0x89,
                0x67,
                0xe4,
                0x73,
                0x92,
                0x1e,
                0xb2
            ])
        );
    });

    it('TicketBundleSubdigestsCanonicalTicketL1Digest', async () => {
        const m = new TicketBundleSubdigests();
        m.setTicketL1DigestList([
            new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]),
            new Uint8Array([4, 5, 6, 7, 8, 9, 0, 1, 2, 3]),
            new Uint8Array([7, 8, 9, 0, 1, 2, 3, 4, 5, 6]),
            new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
        ]);

        const digest = await util.canonicalTicketL1Digest(m);
        expect(digest).toEqual(
            new Uint8Array([
                0x71,
                0xc2,
                0x5a,
                0x8c,
                0x90,
                0x70,
                0x77,
                0x38,
                0x97,
                0x2a,
                0x6f,
                0x87,
                0xc2,
                0x73,
                0x33,
                0x61,
                0x56,
                0x26,
                0xa,
                0xb,
                0x80,
                0xcb,
                0xcd,
                0x9e,
                0xf8,
                0x1a,
                0x1a,
                0xc1,
                0xcd,
                0x74,
                0x94,
                0x5d,
                0xd9,
                0x25,
                0x43,
                0xba,
                0x77,
                0x44,
                0x82,
                0x19,
                0x10,
                0x89,
                0x67,
                0xe4,
                0x73,
                0x92,
                0x1e,
                0xb2
            ])
        );
    });

    it('canonicalEncryptedTicketL2Digest', async () => {
        const m = new TicketBundle();
        m.setEncryptedTicketL2(
            new Uint8Array([
                201,
                51,
                244,
                7,
                147,
                7,
                41,
                29,
                159,
                198,
                30,
                107,
                203,
                213,
                189,
                183,
                1,
                180,
                56,
                142,
                138,
                144,
                167,
                46,
                22,
                54,
                32,
                128,
                95,
                77,
                189,
                230,
                188,
                33,
                118,
                53,
                140,
                213,
                98,
                128,
                4,
                6,
                55,
                164,
                28,
                243,
                8,
                141,
                231,
                54,
                105,
                32,
                125,
                133,
                230,
                239,
                6,
                29,
                199,
                230,
                139,
                111,
                149,
                70,
                222,
                129,
                200,
                220,
                151,
                185,
                18,
                205,
                239,
                107,
                236,
                125,
                103,
                158,
                64,
                250
            ])
        );

        const digest = await util.canonicalEncryptedTicketL2Digest(m);
        expect(digest).toEqual(
            new Uint8Array([
                89,
                79,
                30,
                185,
                194,
                189,
                21,
                204,
                134,
                107,
                117,
                162,
                132,
                43,
                241,
                35,
                32,
                38,
                182,
                248,
                10,
                99,
                16,
                194,
                106,
                239,
                182,
                4,
                195,
                228,
                212,
                200,
                221,
                239,
                202,
                129,
                48,
                13,
                17,
                72,
                66,
                164,
                212,
                253,
                249,
                252,
                94,
                190
            ])
        );
    });

    it('TicketBundleRemainderCanonicalDigest', async () => {
        const puzzle = new ColocationPuzzleInfo();
        puzzle.setGoal(new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));
        puzzle.setRounds(123);
        puzzle.setStartOffset(456);
        puzzle.setStartRange(789);

        const m = new TicketBundleRemainder();
        m.setPuzzleInfo(puzzle);

        const digest = await util.ticketBundleRemainderCanonicalDigest(m);
        expect(digest).toEqual(
            new Uint8Array([
                0x18,
                0x42,
                0x72,
                0x3a,
                0x37,
                0x19,
                0x2b,
                0x1,
                0xd7,
                0xca,
                0xf2,
                0x6c,
                0x6,
                0x30,
                0xee,
                0x2e,
                0xe1,
                0x6f,
                0xce,
                0x5a,
                0x12,
                0xa2,
                0x14,
                0x48,
                0x84,
                0xd1,
                0x7d,
                0x34,
                0x8c,
                0x50,
                0x2b,
                0xce,
                0x7f,
                0x1,
                0x47,
                0x4c,
                0x67,
                0xe4,
                0xb3,
                0x37,
                0x5c,
                0xa3,
                0x3c,
                0xc0,
                0x9c,
                0xf9,
                0xd3,
                0x10
            ])
        );
    });

    it('ColocationPuzzleInfoCanonicalDigest', async () => {
        const puzzle = new ColocationPuzzleInfo();
        puzzle.setGoal(new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));
        puzzle.setRounds(123);
        puzzle.setStartOffset(456);
        puzzle.setStartRange(789);

        const digestInput = util.addPuzzleInfoCanonicalDigest(puzzle);
        expect(digestInput).toEqual(
            new Uint8Array([
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                123,
                0,
                0,
                0,
                200,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                21,
                3,
                0,
                0,
                0,
                0,
                0,
                0
            ])
        );

        let digest = await crypto.subtle.digest('SHA-384', digestInput);
        expect(new Uint8Array(digest)).toEqual(
            new Uint8Array([
                0x18,
                0x42,
                0x72,
                0x3a,
                0x37,
                0x19,
                0x2b,
                0x1,
                0xd7,
                0xca,
                0xf2,
                0x6c,
                0x6,
                0x30,
                0xee,
                0x2e,
                0xe1,
                0x6f,
                0xce,
                0x5a,
                0x12,
                0xa2,
                0x14,
                0x48,
                0x84,
                0xd1,
                0x7d,
                0x34,
                0x8c,
                0x50,
                0x2b,
                0xce,
                0x7f,
                0x1,
                0x47,
                0x4c,
                0x67,
                0xe4,
                0xb3,
                0x37,
                0x5c,
                0xa3,
                0x3c,
                0xc0,
                0x9c,
                0xf9,
                0xd3,
                0x10
            ])
        );
    });

    it('TicketRequestCanonicalDigest', async () => {
        const innerKey = new BlockKey();
        innerKey.setKey(new Uint8Array([1, 2, 4, 5, 6]));

        const cachePublicKey = new PublicKey();
        cachePublicKey.setPublicKey(new Uint8Array([1, 2, 4, 5, 6]));

        const m = new TicketRequest();
        m.setBlockIdx(123);
        m.setInnerKey(innerKey);
        m.setCachePublicKey(cachePublicKey);

        const digest = await util.ticketRequestCanonicalDigest(m);
        expect(digest).toEqual(
            new Uint8Array([
                0xfd,
                0xb4,
                0xf4,
                0xa9,
                0xfd,
                0xa6,
                0x41,
                0x51,
                0xe1,
                0x70,
                0xba,
                0x7d,
                0xfa,
                0x50,
                0xbb,
                0xe,
                0x2c,
                0x1f,
                0x6b,
                0x85,
                0xd4,
                0x50,
                0xe7,
                0x3e,
                0x41,
                0x65,
                0x7c,
                0xd1,
                0x53,
                0x4b,
                0x17,
                0xa8,
                0x31,
                0x58,
                0x5a,
                0x81,
                0x31,
                0x2d,
                0x32,
                0x6f,
                0x7c,
                0x8d,
                0xf0,
                0x31,
                0xb6,
                0x40,
                0xc4,
                0x4b
            ])
        );
    });

    it('TicketBundle getSubdigests', async () => {
        const encryptedTicketL2 = new Uint8Array([1, 2, 3, 4, 5]);

        const puzzle = new ColocationPuzzleInfo();
        puzzle.setGoal(new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));
        puzzle.setRounds(123);
        puzzle.setStartOffset(456);
        puzzle.setStartRange(789);

        const tbr = new TicketBundleRemainder();
        tbr.setPuzzleInfo(puzzle);

        function mkTicketL1(publicKey: Uint8Array): TicketL1 {
            const pk = new PublicKey();
            pk.setPublicKey(publicKey);

            const ticketL1 = new TicketL1();
            ticketL1.setCachePublicKey(pk);

            return ticketL1;
        }

        const ticketL1List = [
            mkTicketL1(new Uint8Array([1, 2, 3, 4, 5])),
            mkTicketL1(new Uint8Array([6, 7, 8, 9, 0]))
        ];

        function mkTicketRequest(innerKey: Uint8Array, publicKey: Uint8Array): TicketRequest {
            const bk = new BlockKey();
            bk.setKey(innerKey);

            const pk = new PublicKey();
            pk.setPublicKey(publicKey);

            const tr = new TicketRequest();
            tr.setInnerKey(bk);
            tr.setCachePublicKey(pk);

            return tr;
        }

        const ticketRequestList = [
            mkTicketRequest(new Uint8Array([1, 2, 3]), new Uint8Array([4, 5, 6])),
            mkTicketRequest(new Uint8Array([7, 8, 9]), new Uint8Array([0, 1, 2]))
        ];

        const bundle = new TicketBundle();
        bundle.setEncryptedTicketL2(encryptedTicketL2);
        bundle.setRemainder(tbr);
        bundle.setTicketL1List(ticketL1List);
        bundle.setTicketRequestList(ticketRequestList);

        const tbs = await util.getSubdigests(bundle);

        expect(tbs.getRemainderDigest()).toEqual(
            new Uint8Array([
                0x18,
                0x42,
                0x72,
                0x3a,
                0x37,
                0x19,
                0x2b,
                0x1,
                0xd7,
                0xca,
                0xf2,
                0x6c,
                0x6,
                0x30,
                0xee,
                0x2e,
                0xe1,
                0x6f,
                0xce,
                0x5a,
                0x12,
                0xa2,
                0x14,
                0x48,
                0x84,
                0xd1,
                0x7d,
                0x34,
                0x8c,
                0x50,
                0x2b,
                0xce,
                0x7f,
                0x1,
                0x47,
                0x4c,
                0x67,
                0xe4,
                0xb3,
                0x37,
                0x5c,
                0xa3,
                0x3c,
                0xc0,
                0x9c,
                0xf9,
                0xd3,
                0x10
            ])
        );

        expect(tbs.getEncryptedTicketL2Digest_asU8()).toEqual(
            new Uint8Array([
                0xd8,
                0x88,
                0x75,
                0xdb,
                0xf,
                0x77,
                0xaa,
                0xd8,
                0xf3,
                0xd9,
                0x94,
                0xfe,
                0x68,
                0xcd,
                0x1c,
                0xc7,
                0xec,
                0x3a,
                0x4f,
                0xf1,
                0x43,
                0x78,
                0xb7,
                0xfe,
                0xb9,
                0x91,
                0xe5,
                0x47,
                0x84,
                0x85,
                0x1,
                0x92,
                0x14,
                0x58,
                0x54,
                0xc3,
                0x6e,
                0x5a,
                0x40,
                0xa0,
                0xc2,
                0xe8,
                0xd,
                0xa2,
                0x0,
                0x2d,
                0x7c,
                0xc8
            ])
        );

        expect(tbs.getTicketL1DigestList_asU8()).toEqual([
            new Uint8Array([
                0xc,
                0x79,
                0x56,
                0x7a,
                0x6f,
                0xf7,
                0xb2,
                0x1c,
                0x24,
                0x51,
                0x25,
                0x1c,
                0xd7,
                0xcf,
                0x55,
                0x29,
                0xe5,
                0xd9,
                0x4a,
                0x9d,
                0x84,
                0x46,
                0x84,
                0xd,
                0x39,
                0x4d,
                0x6e,
                0x1,
                0x30,
                0x8c,
                0x4f,
                0x33,
                0xe8,
                0xab,
                0x2a,
                0xcc,
                0xa,
                0x78,
                0x89,
                0x92,
                0xc2,
                0xc4,
                0x90,
                0x8f,
                0xfc,
                0x80,
                0x94,
                0xd5
            ]),
            new Uint8Array([
                0x1b,
                0x2c,
                0x2a,
                0x2d,
                0x6c,
                0x97,
                0x35,
                0xd0,
                0xa8,
                0xa6,
                0x2f,
                0xab,
                0xf6,
                0xd3,
                0xde,
                0x73,
                0x44,
                0xa3,
                0x1f,
                0xf1,
                0x68,
                0xc8,
                0x5a,
                0x9b,
                0x67,
                0x9,
                0x3e,
                0x9d,
                0x7,
                0xfc,
                0xf0,
                0xe0,
                0x8f,
                0xe5,
                0x10,
                0x2a,
                0xa0,
                0xa8,
                0xb,
                0xf,
                0x3d,
                0x5d,
                0xde,
                0x8d,
                0xfb,
                0x6e,
                0x54,
                0x34
            ])
        ]);

        expect(tbs.getTicketRequestDigestList_asU8()).toEqual([
            new Uint8Array([
                0x6b,
                0xb3,
                0x2e,
                0x44,
                0x50,
                0x5d,
                0xc6,
                0xb7,
                0x3e,
                0xcc,
                0xcb,
                0x72,
                0x9f,
                0xf1,
                0xaf,
                0x5a,
                0xd4,
                0x5a,
                0x95,
                0x95,
                0x42,
                0x37,
                0x63,
                0x89,
                0xe3,
                0x46,
                0xc3,
                0xae,
                0xfd,
                0x37,
                0xd,
                0x42,
                0x78,
                0x7,
                0xc,
                0xaa,
                0x1a,
                0xd3,
                0xf0,
                0xd9,
                0xac,
                0x2a,
                0x78,
                0x51,
                0xf6,
                0xea,
                0x9a,
                0x5e
            ]),
            new Uint8Array([
                0xd,
                0x27,
                0x76,
                0xaf,
                0xc3,
                0x90,
                0x3d,
                0xc0,
                0x32,
                0xe6,
                0x47,
                0x1b,
                0x79,
                0x60,
                0x5,
                0xe,
                0xfe,
                0x68,
                0xb0,
                0x7,
                0x90,
                0xc4,
                0x6f,
                0x4a,
                0xd0,
                0xf4,
                0x18,
                0x12,
                0xb9,
                0x4f,
                0x1b,
                0x58,
                0x36,
                0x7e,
                0x1a,
                0x66,
                0x63,
                0xf1,
                0x42,
                0xb9,
                0x17,
                0xd3,
                0x5a,
                0x94,
                0x1e,
                0x5d,
                0x96,
                0x7e
            ])
        ]);

        const digest = await util.ticketBundleSubdigestsCanonicalDigest(tbs);
        expect(digest).toEqual(
            new Uint8Array([
                0x4d,
                0x69,
                0xc2,
                0xda,
                0x8f,
                0x55,
                0x4b,
                0xbd,
                0x3a,
                0x3d,
                0x74,
                0xda,
                0x9,
                0x26,
                0xef,
                0x40,
                0x71,
                0x5e,
                0xcf,
                0x4b,
                0x54,
                0x6e,
                0x7d,
                0x3,
                0x75,
                0x58,
                0x5a,
                0xab,
                0x99,
                0xe9,
                0x1e,
                0x48,
                0xd0,
                0x56,
                0x58,
                0x53,
                0x7d,
                0x4a,
                0x85,
                0xb1,
                0x42,
                0x88,
                0x7,
                0x96,
                0x96,
                0x79,
                0x8d,
                0xb7
            ])
        );
    });
});
